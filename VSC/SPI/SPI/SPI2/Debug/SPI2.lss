
SPI2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002538  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002538  000025cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800180  00800180  000026ec  2**0
                  ALLOC
  3 .stab         00002610  00000000  00000000  000026ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a1b  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006717  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  00006857  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  000069ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  00008476  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  0000932d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a124  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  0000a284  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  0000a543  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_11>
      30:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_12>
      34:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_13>
      38:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 35 11 	call	0x226a	; 0x226a <main>
      8a:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__divsf3+0x48>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__divsf3+0x144>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__divsf3+0x52>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__divsf3+0x14a>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__divsf3+0x62>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__divsf3+0x6e>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__divsf3+0x68>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__divsf3+0x144>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__divsf3+0x14a>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__divsf3+0x80>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__divsf3+0x88>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__divsf3+0x8c>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__divsf3+0x14a>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__divsf3+0xc6>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0xf4>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__divsf3+0xda>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__divsf3+0x13c>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__divsf3+0x13c>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x13c>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 87 12 	jmp	0x250e	; 0x250e <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

000005f6 <__fixsfsi>:
     5f6:	ac e0       	ldi	r26, 0x0C	; 12
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__prologue_saves__+0x20>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	be 01       	movw	r22, r28
     610:	6b 5f       	subi	r22, 0xFB	; 251
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	61 f1       	breq	.+88     	; 0x676 <__fixsfsi+0x80>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	50 f1       	brcs	.+84     	; 0x676 <__fixsfsi+0x80>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	21 f4       	brne	.+8      	; 0x62e <__fixsfsi+0x38>
     626:	8e 81       	ldd	r24, Y+6	; 0x06
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <__fixsfsi+0x8a>
     62c:	2e c0       	rjmp	.+92     	; 0x68a <__fixsfsi+0x94>
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	37 fd       	sbrc	r19, 7
     634:	20 c0       	rjmp	.+64     	; 0x676 <__fixsfsi+0x80>
     636:	6e 81       	ldd	r22, Y+6	; 0x06
     638:	2f 31       	cpi	r18, 0x1F	; 31
     63a:	31 05       	cpc	r19, r1
     63c:	1c f0       	brlt	.+6      	; 0x644 <__fixsfsi+0x4e>
     63e:	66 23       	and	r22, r22
     640:	f9 f0       	breq	.+62     	; 0x680 <__fixsfsi+0x8a>
     642:	23 c0       	rjmp	.+70     	; 0x68a <__fixsfsi+0x94>
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	4b 85       	ldd	r20, Y+11	; 0x0b
     652:	5c 85       	ldd	r21, Y+12	; 0x0c
     654:	04 c0       	rjmp	.+8      	; 0x65e <__fixsfsi+0x68>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	8a 95       	dec	r24
     660:	d2 f7       	brpl	.-12     	; 0x656 <__fixsfsi+0x60>
     662:	66 23       	and	r22, r22
     664:	b1 f0       	breq	.+44     	; 0x692 <__fixsfsi+0x9c>
     666:	50 95       	com	r21
     668:	40 95       	com	r20
     66a:	30 95       	com	r19
     66c:	21 95       	neg	r18
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	4f 4f       	sbci	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <__fixsfsi+0x9c>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__fixsfsi+0x9c>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	3f ef       	ldi	r19, 0xFF	; 255
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f e7       	ldi	r21, 0x7F	; 127
     688:	04 c0       	rjmp	.+8      	; 0x692 <__fixsfsi+0x9c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e8       	ldi	r21, 0x80	; 128
     692:	b9 01       	movw	r22, r18
     694:	ca 01       	movw	r24, r20
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	e2 e0       	ldi	r30, 0x02	; 2
     69a:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__epilogue_restores__+0x20>

0000069e <__floatunsisf>:
     69e:	a8 e0       	ldi	r26, 0x08	; 8
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__prologue_saves__+0x10>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	81 05       	cpc	r24, r1
     6b4:	91 05       	cpc	r25, r1
     6b6:	19 f4       	brne	.+6      	; 0x6be <__floatunsisf+0x20>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <__floatunsisf+0xe0>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	dc 82       	std	Y+4, r13	; 0x04
     6ca:	cb 82       	std	Y+3, r12	; 0x03
     6cc:	ed 82       	std	Y+5, r14	; 0x05
     6ce:	fe 82       	std	Y+6, r15	; 0x06
     6d0:	0f 83       	std	Y+7, r16	; 0x07
     6d2:	18 87       	std	Y+8, r17	; 0x08
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 c8 03 	call	0x790	; 0x790 <__clzsi2>
     6dc:	fc 01       	movw	r30, r24
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f7 ff       	sbrs	r31, 7
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <__floatunsisf+0xbc>
     6e4:	22 27       	eor	r18, r18
     6e6:	33 27       	eor	r19, r19
     6e8:	2e 1b       	sub	r18, r30
     6ea:	3f 0b       	sbc	r19, r31
     6ec:	57 01       	movw	r10, r14
     6ee:	68 01       	movw	r12, r16
     6f0:	02 2e       	mov	r0, r18
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__floatunsisf+0x5e>
     6f4:	d6 94       	lsr	r13
     6f6:	c7 94       	ror	r12
     6f8:	b7 94       	ror	r11
     6fa:	a7 94       	ror	r10
     6fc:	0a 94       	dec	r0
     6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <__floatunsisf+0x56>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <__floatunsisf+0x7c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__floatunsisf+0x74>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	8e 21       	and	r24, r14
     726:	9f 21       	and	r25, r15
     728:	a0 23       	and	r26, r16
     72a:	b1 23       	and	r27, r17
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f0       	breq	.+8      	; 0x73c <__floatunsisf+0x9e>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	4a 29       	or	r20, r10
     73e:	5b 29       	or	r21, r11
     740:	6c 29       	or	r22, r12
     742:	7d 29       	or	r23, r13
     744:	4d 83       	std	Y+5, r20	; 0x05
     746:	5e 83       	std	Y+6, r21	; 0x06
     748:	6f 83       	std	Y+7, r22	; 0x07
     74a:	78 87       	std	Y+8, r23	; 0x08
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8e 1b       	sub	r24, r30
     752:	9f 0b       	sbc	r25, r31
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	12 c0       	rjmp	.+36     	; 0x77e <__floatunsisf+0xe0>
     75a:	30 97       	sbiw	r30, 0x00	; 0
     75c:	81 f0       	breq	.+32     	; 0x77e <__floatunsisf+0xe0>
     75e:	0e 2e       	mov	r0, r30
     760:	04 c0       	rjmp	.+8      	; 0x76a <__floatunsisf+0xcc>
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__floatunsisf+0xc4>
     76e:	ed 82       	std	Y+5, r14	; 0x05
     770:	fe 82       	std	Y+6, r15	; 0x06
     772:	0f 83       	std	Y+7, r16	; 0x07
     774:	18 87       	std	Y+8, r17	; 0x08
     776:	ce 1a       	sub	r12, r30
     778:	df 0a       	sbc	r13, r31
     77a:	dc 82       	std	Y+4, r13	; 0x04
     77c:	cb 82       	std	Y+3, r12	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     788:	28 96       	adiw	r28, 0x08	; 8
     78a:	ea e0       	ldi	r30, 0x0A	; 10
     78c:	0c 94 87 12 	jmp	0x250e	; 0x250e <__epilogue_restores__+0x10>

00000790 <__clzsi2>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	e8 16       	cp	r14, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	f8 06       	cpc	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 07       	cpc	r16, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	18 07       	cpc	r17, r24
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <__clzsi2+0x40>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	e8 16       	cp	r14, r24
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <__clzsi2+0x36>
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__clzsi2+0x36>
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__clzsi2+0x64>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__clzsi2+0x64>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	e8 16       	cp	r14, r24
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	f8 06       	cpc	r15, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 07       	cpc	r16, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	18 07       	cpc	r17, r24
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__clzsi2+0x5c>
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__clzsi2+0x64>
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	20 e2       	ldi	r18, 0x20	; 32
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	4a 0b       	sbc	r20, r26
     802:	5b 0b       	sbc	r21, r27
     804:	04 c0       	rjmp	.+8      	; 0x80e <__clzsi2+0x7e>
     806:	16 95       	lsr	r17
     808:	07 95       	ror	r16
     80a:	f7 94       	ror	r15
     80c:	e7 94       	ror	r14
     80e:	8a 95       	dec	r24
     810:	d2 f7       	brpl	.-12     	; 0x806 <__clzsi2+0x76>
     812:	f7 01       	movw	r30, r14
     814:	e8 59       	subi	r30, 0x98	; 152
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	28 1b       	sub	r18, r24
     81c:	31 09       	sbc	r19, r1
     81e:	41 09       	sbc	r20, r1
     820:	51 09       	sbc	r21, r1
     822:	c9 01       	movw	r24, r18
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <__pack_f>:
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	fc 01       	movw	r30, r24
     83a:	e4 80       	ldd	r14, Z+4	; 0x04
     83c:	f5 80       	ldd	r15, Z+5	; 0x05
     83e:	06 81       	ldd	r16, Z+6	; 0x06
     840:	17 81       	ldd	r17, Z+7	; 0x07
     842:	d1 80       	ldd	r13, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	48 f4       	brcc	.+18     	; 0x85c <__pack_f+0x2e>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e1       	ldi	r26, 0x10	; 16
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e8 2a       	or	r14, r24
     854:	f9 2a       	or	r15, r25
     856:	0a 2b       	or	r16, r26
     858:	1b 2b       	or	r17, r27
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__stack+0x147>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
     860:	9f c0       	rjmp	.+318    	; 0x9a0 <__stack+0x141>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	21 f4       	brne	.+8      	; 0x86e <__stack+0xf>
     866:	ee 24       	eor	r14, r14
     868:	ff 24       	eor	r15, r15
     86a:	87 01       	movw	r16, r14
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
     86e:	e1 14       	cp	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	01 05       	cpc	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	19 f4       	brne	.+6      	; 0x87e <__stack+0x1f>
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	96 c0       	rjmp	.+300    	; 0x9aa <__stack+0x14b>
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	62 38       	cpi	r22, 0x82	; 130
     886:	79 07       	cpc	r23, r25
     888:	0c f0       	brlt	.+2      	; 0x88c <__stack+0x2d>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <__stack+0xe3>
     88c:	22 e8       	ldi	r18, 0x82	; 130
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	26 1b       	sub	r18, r22
     892:	37 0b       	sbc	r19, r23
     894:	2a 31       	cpi	r18, 0x1A	; 26
     896:	31 05       	cpc	r19, r1
     898:	2c f0       	brlt	.+10     	; 0x8a4 <__stack+0x45>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__stack+0x99>
     8a4:	b8 01       	movw	r22, r16
     8a6:	a7 01       	movw	r20, r14
     8a8:	02 2e       	mov	r0, r18
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	76 95       	lsr	r23
     8ae:	67 95       	ror	r22
     8b0:	57 95       	ror	r21
     8b2:	47 95       	ror	r20
     8b4:	0a 94       	dec	r0
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__stack+0x6b>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	2a 95       	dec	r18
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__stack+0x63>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__stack+0x8d>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	9a 01       	movw	r18, r20
     8ee:	ab 01       	movw	r20, r22
     8f0:	28 2b       	or	r18, r24
     8f2:	39 2b       	or	r19, r25
     8f4:	4a 2b       	or	r20, r26
     8f6:	5b 2b       	or	r21, r27
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	39 f4       	brne	.+14     	; 0x91c <__stack+0xbd>
     90e:	27 ff       	sbrs	r18, 7
     910:	09 c0       	rjmp	.+18     	; 0x924 <__stack+0xc5>
     912:	20 5c       	subi	r18, 0xC0	; 192
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0xc5>
     91c:	21 5c       	subi	r18, 0xC1	; 193
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	e0 e0       	ldi	r30, 0x00	; 0
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	3a 07       	cpc	r19, r26
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	4a 07       	cpc	r20, r26
     932:	a0 e4       	ldi	r26, 0x40	; 64
     934:	5a 07       	cpc	r21, r26
     936:	10 f0       	brcs	.+4      	; 0x93c <__stack+0xdd>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	79 01       	movw	r14, r18
     93e:	8a 01       	movw	r16, r20
     940:	27 c0       	rjmp	.+78     	; 0x990 <__stack+0x131>
     942:	60 38       	cpi	r22, 0x80	; 128
     944:	71 05       	cpc	r23, r1
     946:	64 f5       	brge	.+88     	; 0x9a0 <__stack+0x141>
     948:	fb 01       	movw	r30, r22
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	d8 01       	movw	r26, r16
     950:	c7 01       	movw	r24, r14
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__stack+0x113>
     964:	e7 fe       	sbrs	r14, 7
     966:	0d c0       	rjmp	.+26     	; 0x982 <__stack+0x123>
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__stack+0x11b>
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	17 ff       	sbrs	r17, 7
     984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x131>
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	f7 94       	ror	r15
     98c:	e7 94       	ror	r14
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	16 95       	lsr	r17
     994:	07 95       	ror	r16
     996:	f7 94       	ror	r15
     998:	e7 94       	ror	r14
     99a:	8a 95       	dec	r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <__stack+0x133>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__stack+0x14b>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	ef ef       	ldi	r30, 0xFF	; 255
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	6e 2f       	mov	r22, r30
     9ac:	67 95       	ror	r22
     9ae:	66 27       	eor	r22, r22
     9b0:	67 95       	ror	r22
     9b2:	90 2f       	mov	r25, r16
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	d7 94       	ror	r13
     9b8:	dd 24       	eor	r13, r13
     9ba:	d7 94       	ror	r13
     9bc:	8e 2f       	mov	r24, r30
     9be:	86 95       	lsr	r24
     9c0:	49 2f       	mov	r20, r25
     9c2:	46 2b       	or	r20, r22
     9c4:	58 2f       	mov	r21, r24
     9c6:	5d 29       	or	r21, r13
     9c8:	b7 01       	movw	r22, r14
     9ca:	ca 01       	movw	r24, r20
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	08 95       	ret

000009d8 <__unpack_f>:
     9d8:	fc 01       	movw	r30, r24
     9da:	db 01       	movw	r26, r22
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	6f 77       	andi	r22, 0x7F	; 127
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	22 1f       	adc	r18, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	22 1f       	adc	r18, r18
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	89 2f       	mov	r24, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	82 2b       	or	r24, r18
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	99 1f       	adc	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	99 1f       	adc	r25, r25
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <__unpack_f+0x9e>
     a0c:	41 15       	cp	r20, r1
     a0e:	51 05       	cpc	r21, r1
     a10:	61 05       	cpc	r22, r1
     a12:	71 05       	cpc	r23, r1
     a14:	11 f4       	brne	.+4      	; 0xa1a <__unpack_f+0x42>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <__unpack_f+0xb0>
     a1a:	82 e8       	ldi	r24, 0x82	; 130
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	9a 01       	movw	r18, r20
     a28:	ab 01       	movw	r20, r22
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0x54>
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	8c 93       	st	X, r24
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__unpack_f+0x80>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	20 30       	cpi	r18, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	38 07       	cpc	r19, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	48 07       	cpc	r20, r24
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	58 07       	cpc	r21, r24
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__unpack_f+0x66>
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	2d 93       	st	X+, r18
     a6c:	3d 93       	st	X+, r19
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret
     a76:	2f 3f       	cpi	r18, 0xFF	; 255
     a78:	31 05       	cpc	r19, r1
     a7a:	79 f4       	brne	.+30     	; 0xa9a <__unpack_f+0xc2>
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	61 05       	cpc	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__unpack_f+0xb4>
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret
     a8c:	64 ff       	sbrs	r22, 4
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <__unpack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 93       	st	X, r24
     a94:	12 c0       	rjmp	.+36     	; 0xaba <__unpack_f+0xe2>
     a96:	1c 92       	st	X, r1
     a98:	10 c0       	rjmp	.+32     	; 0xaba <__unpack_f+0xe2>
     a9a:	2f 57       	subi	r18, 0x7F	; 127
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	8c 93       	st	X, r24
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <__unpack_f+0xd4>
     ab8:	70 64       	ori	r23, 0x40	; 64
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	4d 93       	st	X+, r20
     abe:	5d 93       	st	X+, r21
     ac0:	6d 93       	st	X+, r22
     ac2:	7c 93       	st	X, r23
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	08 95       	ret

00000ac8 <__fpcmp_parts_f>:
     ac8:	1f 93       	push	r17
     aca:	dc 01       	movw	r26, r24
     acc:	fb 01       	movw	r30, r22
     ace:	9c 91       	ld	r25, X
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__fpcmp_parts_f+0xe>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0x16>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ade:	94 30       	cpi	r25, 0x04	; 4
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <__fpcmp_parts_f+0x2e>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	99 f5       	brne	.+102    	; 0xb50 <__fpcmp_parts_f+0x88>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	61 1b       	sub	r22, r17
     af2:	71 09       	sbc	r23, r1
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <__fpcmp_parts_f+0xac>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <__fpcmp_parts_f+0x3a>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	31 f4       	brne	.+12     	; 0xb0a <__fpcmp_parts_f+0x42>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	b9 f1       	breq	.+110    	; 0xb70 <__fpcmp_parts_f+0xa8>
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 23       	and	r24, r24
     b06:	89 f1       	breq	.+98     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b08:	2d c0       	rjmp	.+90     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	f1 f0       	breq	.+60     	; 0xb50 <__fpcmp_parts_f+0x88>
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	18 17       	cp	r17, r24
     b18:	d9 f4       	brne	.+54     	; 0xb50 <__fpcmp_parts_f+0x88>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	2d 91       	ld	r18, X+
     b1e:	3c 91       	ld	r19, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	94 f0       	brlt	.+36     	; 0xb50 <__fpcmp_parts_f+0x88>
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	bc f0       	brlt	.+46     	; 0xb60 <__fpcmp_parts_f+0x98>
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	46 81       	ldd	r20, Z+6	; 0x06
     b44:	57 81       	ldd	r21, Z+7	; 0x07
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	4a 07       	cpc	r20, r26
     b4c:	5b 07       	cpc	r21, r27
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <__fpcmp_parts_f+0x8e>
     b50:	11 23       	and	r17, r17
     b52:	41 f0       	breq	.+16     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b56:	82 17       	cp	r24, r18
     b58:	93 07       	cpc	r25, r19
     b5a:	a4 07       	cpc	r26, r20
     b5c:	b5 07       	cpc	r27, r21
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fpcmp_parts_f+0xa8>
     b60:	11 23       	and	r17, r17
     b62:	19 f0       	breq	.+6      	; 0xb6a <__fpcmp_parts_f+0xa2>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fpcmp_parts_f+0xac>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__fpcmp_parts_f+0xac>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
     b76:	1f 91       	pop	r17
     b78:	08 95       	ret

00000b7a <__vector_12>:
void __vector_12(void)__attribute((signal,used));
/********** global flag for receive interrupt*****************************/
static uint8_t gu8_flag =0;

void __vector_12()
{
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	8f 93       	push	r24
     b86:	af 93       	push	r26
     b88:	bf 93       	push	r27
     b8a:	ef 93       	push	r30
     b8c:	ff 93       	push	r31
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	gu8_flag =1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 80 01 	sts	0x0180, r24
	CLEAR_BIT(SPCR,SPIE);
     b9c:	ad e2       	ldi	r26, 0x2D	; 45
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ed e2       	ldi	r30, 0x2D	; 45
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	8c 93       	st	X, r24
}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	8f 91       	pop	r24
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <SPI_init>:
 * @return: returns error status
 * Description: Function to initialize SPI
 **************************************************************************/

uint8_t SPI_init(SPI_Cfg_s *cfg)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <SPI_init+0x6>
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	9b 83       	std	Y+3, r25	; 0x03
     bd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status=ERROR_OK;
     bd2:	19 82       	std	Y+1, r1	; 0x01
	if (SPI_ENABLE ==cfg->SPI_Enable)
     bd4:	ea 81       	ldd	r30, Y+2	; 0x02
     bd6:	fb 81       	ldd	r31, Y+3	; 0x03
     bd8:	86 81       	ldd	r24, Z+6	; 0x06
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <SPI_init+0x1e>
     bde:	3f c1       	rjmp	.+638    	; 0xe5e <SPI_init+0x29c>
	{
		if (MASTERMODE == cfg->SPI_Mode)
     be0:	ea 81       	ldd	r30, Y+2	; 0x02
     be2:	fb 81       	ldd	r31, Y+3	; 0x03
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	09 f0       	breq	.+2      	; 0xbec <SPI_init+0x2a>
     bea:	a2 c0       	rjmp	.+324    	; 0xd30 <SPI_init+0x16e>
		{
			DIO_Init_Pin(PB4,HIGH);
     bec:	8c e0       	ldi	r24, 0x0C	; 12
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
			DIO_Init_Pin(PB5,HIGH);
     bf4:	8d e0       	ldi	r24, 0x0D	; 13
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
			DIO_Init_Pin(PB6,LOW);
     bfc:	8e e0       	ldi	r24, 0x0E	; 14
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
			DIO_Init_Pin(PB7,HIGH);
     c04:	8f e0       	ldi	r24, 0x0F	; 15
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
			SET_BIT(SPCR,MSTR);
     c0c:	ad e2       	ldi	r26, 0x2D	; 45
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ed e2       	ldi	r30, 0x2D	; 45
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 61       	ori	r24, 0x10	; 16
     c18:	8c 93       	st	X, r24
			if (cfg->Pre_Scaller >=0 && cfg->Pre_Scaller <4)
     c1a:	ea 81       	ldd	r30, Y+2	; 0x02
     c1c:	fb 81       	ldd	r31, Y+3	; 0x03
     c1e:	80 81       	ld	r24, Z
     c20:	84 30       	cpi	r24, 0x04	; 4
     c22:	08 f0       	brcs	.+2      	; 0xc26 <SPI_init+0x64>
     c24:	82 c0       	rjmp	.+260    	; 0xd2a <SPI_init+0x168>
			{
				SPCR= (SPCR & 0xFC) | cfg->Pre_Scaller;
     c26:	ad e2       	ldi	r26, 0x2D	; 45
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	ed e2       	ldi	r30, 0x2D	; 45
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	98 2f       	mov	r25, r24
     c32:	9c 7f       	andi	r25, 0xFC	; 252
     c34:	ea 81       	ldd	r30, Y+2	; 0x02
     c36:	fb 81       	ldd	r31, Y+3	; 0x03
     c38:	80 81       	ld	r24, Z
     c3a:	89 2b       	or	r24, r25
     c3c:	8c 93       	st	X, r24
				if (DOUBLE_SPEED_MODE == cfg->Speed_Mode)
     c3e:	ea 81       	ldd	r30, Y+2	; 0x02
     c40:	fb 81       	ldd	r31, Y+3	; 0x03
     c42:	81 81       	ldd	r24, Z+1	; 0x01
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	41 f4       	brne	.+16     	; 0xc58 <SPI_init+0x96>
				{
					SET_BIT(SPSR,SPI2X);
     c48:	ae e2       	ldi	r26, 0x2E	; 46
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ee e2       	ldi	r30, 0x2E	; 46
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	8c 93       	st	X, r24
     c56:	07 c0       	rjmp	.+14     	; 0xc66 <SPI_init+0xa4>
				}
				else
				{
					CLEAR_BIT(SPSR,SPI2X);
     c58:	ae e2       	ldi	r26, 0x2E	; 46
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	ee e2       	ldi	r30, 0x2E	; 46
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8e 7f       	andi	r24, 0xFE	; 254
     c64:	8c 93       	st	X, r24
				}
				if (DATA_ORDER_LSB == cfg->Data_Order)
     c66:	ea 81       	ldd	r30, Y+2	; 0x02
     c68:	fb 81       	ldd	r31, Y+3	; 0x03
     c6a:	87 81       	ldd	r24, Z+7	; 0x07
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	41 f4       	brne	.+16     	; 0xc80 <SPI_init+0xbe>
				{
					SET_BIT(SPCR,DORD);
     c70:	ad e2       	ldi	r26, 0x2D	; 45
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ed e2       	ldi	r30, 0x2D	; 45
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 62       	ori	r24, 0x20	; 32
     c7c:	8c 93       	st	X, r24
     c7e:	07 c0       	rjmp	.+14     	; 0xc8e <SPI_init+0xcc>
				}
				else
				{
					CLEAR_BIT(SPCR,DORD);
     c80:	ad e2       	ldi	r26, 0x2D	; 45
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	ed e2       	ldi	r30, 0x2D	; 45
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8f 7d       	andi	r24, 0xDF	; 223
     c8c:	8c 93       	st	X, r24
				}
				if (SPI_INTERRUPT == cfg->Interrupt_Mode)
     c8e:	ea 81       	ldd	r30, Y+2	; 0x02
     c90:	fb 81       	ldd	r31, Y+3	; 0x03
     c92:	83 81       	ldd	r24, Z+3	; 0x03
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	69 f4       	brne	.+26     	; 0xcb2 <SPI_init+0xf0>
				{
					SET_BIT(SREG,I);
     c98:	af e5       	ldi	r26, 0x5F	; 95
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	ef e5       	ldi	r30, 0x5F	; 95
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 68       	ori	r24, 0x80	; 128
     ca4:	8c 93       	st	X, r24
					gu8_Int = cfg->Interrupt_Mode;
     ca6:	ea 81       	ldd	r30, Y+2	; 0x02
     ca8:	fb 81       	ldd	r31, Y+3	; 0x03
     caa:	83 81       	ldd	r24, Z+3	; 0x03
     cac:	80 93 81 01 	sts	0x0181, r24
     cb0:	13 c0       	rjmp	.+38     	; 0xcd8 <SPI_init+0x116>
				}
				else
				{
					CLEAR_BIT(SREG,I);
     cb2:	af e5       	ldi	r26, 0x5F	; 95
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ef e5       	ldi	r30, 0x5F	; 95
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 77       	andi	r24, 0x7F	; 127
     cbe:	8c 93       	st	X, r24
					CLEAR_BIT(SPCR,SPIE);
     cc0:	ad e2       	ldi	r26, 0x2D	; 45
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ed e2       	ldi	r30, 0x2D	; 45
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8f 77       	andi	r24, 0x7F	; 127
     ccc:	8c 93       	st	X, r24
					gu8_Int = cfg->Interrupt_Mode;
     cce:	ea 81       	ldd	r30, Y+2	; 0x02
     cd0:	fb 81       	ldd	r31, Y+3	; 0x03
     cd2:	83 81       	ldd	r24, Z+3	; 0x03
     cd4:	80 93 81 01 	sts	0x0181, r24
				}
				if (CLOCK_POLARITY_HIGH == cfg->Polarity_Mode)
     cd8:	ea 81       	ldd	r30, Y+2	; 0x02
     cda:	fb 81       	ldd	r31, Y+3	; 0x03
     cdc:	84 81       	ldd	r24, Z+4	; 0x04
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	41 f4       	brne	.+16     	; 0xcf2 <SPI_init+0x130>
				{
					SET_BIT(SPCR,CPOL);
     ce2:	ad e2       	ldi	r26, 0x2D	; 45
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ed e2       	ldi	r30, 0x2D	; 45
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	8c 93       	st	X, r24
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <SPI_init+0x13e>
				}
				else
				{
					CLEAR_BIT(SPCR,CPOL);
     cf2:	ad e2       	ldi	r26, 0x2D	; 45
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ed e2       	ldi	r30, 0x2D	; 45
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	87 7f       	andi	r24, 0xF7	; 247
     cfe:	8c 93       	st	X, r24
				}
				if (SAMPLING_EDGE_TRAIL == cfg->Phase_Mode)
     d00:	ea 81       	ldd	r30, Y+2	; 0x02
     d02:	fb 81       	ldd	r31, Y+3	; 0x03
     d04:	85 81       	ldd	r24, Z+5	; 0x05
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	41 f4       	brne	.+16     	; 0xd1a <SPI_init+0x158>
				{
					SET_BIT(SPCR,CPHA);
     d0a:	ad e2       	ldi	r26, 0x2D	; 45
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ed e2       	ldi	r30, 0x2D	; 45
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	84 60       	ori	r24, 0x04	; 4
     d16:	8c 93       	st	X, r24
     d18:	ab c0       	rjmp	.+342    	; 0xe70 <SPI_init+0x2ae>
				}
				else
				{
					CLEAR_BIT(SPCR,CPHA);
     d1a:	ad e2       	ldi	r26, 0x2D	; 45
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ed e2       	ldi	r30, 0x2D	; 45
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8b 7f       	andi	r24, 0xFB	; 251
     d26:	8c 93       	st	X, r24
     d28:	a3 c0       	rjmp	.+326    	; 0xe70 <SPI_init+0x2ae>
				}
				/*SET_BIT(SPCR,SPE);*/
			}
			else
			{
				status = ERROR_NOK;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	a0 c0       	rjmp	.+320    	; 0xe70 <SPI_init+0x2ae>
			}
		}
		else if (SLAVEMODE == cfg->SPI_Mode)
     d30:	ea 81       	ldd	r30, Y+2	; 0x02
     d32:	fb 81       	ldd	r31, Y+3	; 0x03
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	88 23       	and	r24, r24
     d38:	09 f0       	breq	.+2      	; 0xd3c <SPI_init+0x17a>
     d3a:	8e c0       	rjmp	.+284    	; 0xe58 <SPI_init+0x296>
		{
			DIO_Init_Pin(PB4,LOW);
     d3c:	8c e0       	ldi	r24, 0x0C	; 12
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
			DIO_Init_Pin(PB5,LOW);
     d44:	8d e0       	ldi	r24, 0x0D	; 13
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
			DIO_Init_Pin(PB6,HIGH);
     d4c:	8e e0       	ldi	r24, 0x0E	; 14
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
			DIO_Init_Pin(PB7,LOW);
     d54:	8f e0       	ldi	r24, 0x0F	; 15
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
			CLEAR_BIT(SPCR,MSTR);
     d5c:	ad e2       	ldi	r26, 0x2D	; 45
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ed e2       	ldi	r30, 0x2D	; 45
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8f 7e       	andi	r24, 0xEF	; 239
     d68:	8c 93       	st	X, r24
			CLEAR_BIT(SPSR,SPI2X);
     d6a:	ae e2       	ldi	r26, 0x2E	; 46
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ee e2       	ldi	r30, 0x2E	; 46
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8e 7f       	andi	r24, 0xFE	; 254
     d76:	8c 93       	st	X, r24
			CLEAR_BIT(SPCR,SPR0);
     d78:	ad e2       	ldi	r26, 0x2D	; 45
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ed e2       	ldi	r30, 0x2D	; 45
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8e 7f       	andi	r24, 0xFE	; 254
     d84:	8c 93       	st	X, r24
			CLEAR_BIT(SPCR,SPR1);
     d86:	ad e2       	ldi	r26, 0x2D	; 45
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ed e2       	ldi	r30, 0x2D	; 45
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	8c 93       	st	X, r24
			if (DATA_ORDER_LSB == cfg->Data_Order)
     d94:	ea 81       	ldd	r30, Y+2	; 0x02
     d96:	fb 81       	ldd	r31, Y+3	; 0x03
     d98:	87 81       	ldd	r24, Z+7	; 0x07
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	41 f4       	brne	.+16     	; 0xdae <SPI_init+0x1ec>
			{
				SET_BIT(SPCR,DORD);
     d9e:	ad e2       	ldi	r26, 0x2D	; 45
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ed e2       	ldi	r30, 0x2D	; 45
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	80 62       	ori	r24, 0x20	; 32
     daa:	8c 93       	st	X, r24
     dac:	07 c0       	rjmp	.+14     	; 0xdbc <SPI_init+0x1fa>
			}
			else
			{
				CLEAR_BIT(SPCR,DORD);
     dae:	ad e2       	ldi	r26, 0x2D	; 45
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ed e2       	ldi	r30, 0x2D	; 45
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8f 7d       	andi	r24, 0xDF	; 223
     dba:	8c 93       	st	X, r24
			}
			if (SPI_INTERRUPT == cfg->Interrupt_Mode)
     dbc:	ea 81       	ldd	r30, Y+2	; 0x02
     dbe:	fb 81       	ldd	r31, Y+3	; 0x03
     dc0:	83 81       	ldd	r24, Z+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	69 f4       	brne	.+26     	; 0xde0 <SPI_init+0x21e>
			{
				SET_BIT(SREG,I);
     dc6:	af e5       	ldi	r26, 0x5F	; 95
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ef e5       	ldi	r30, 0x5F	; 95
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 68       	ori	r24, 0x80	; 128
     dd2:	8c 93       	st	X, r24
				gu8_Int = cfg->Interrupt_Mode;
     dd4:	ea 81       	ldd	r30, Y+2	; 0x02
     dd6:	fb 81       	ldd	r31, Y+3	; 0x03
     dd8:	83 81       	ldd	r24, Z+3	; 0x03
     dda:	80 93 81 01 	sts	0x0181, r24
     dde:	13 c0       	rjmp	.+38     	; 0xe06 <SPI_init+0x244>
			}
			else
			{
				CLEAR_BIT(SREG,I);
     de0:	af e5       	ldi	r26, 0x5F	; 95
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ef e5       	ldi	r30, 0x5F	; 95
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 77       	andi	r24, 0x7F	; 127
     dec:	8c 93       	st	X, r24
				CLEAR_BIT(SPCR,SPIE);
     dee:	ad e2       	ldi	r26, 0x2D	; 45
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ed e2       	ldi	r30, 0x2D	; 45
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 77       	andi	r24, 0x7F	; 127
     dfa:	8c 93       	st	X, r24
				gu8_Int = cfg->Interrupt_Mode;
     dfc:	ea 81       	ldd	r30, Y+2	; 0x02
     dfe:	fb 81       	ldd	r31, Y+3	; 0x03
     e00:	83 81       	ldd	r24, Z+3	; 0x03
     e02:	80 93 81 01 	sts	0x0181, r24
			}
			if (CLOCK_POLARITY_HIGH == cfg->Polarity_Mode)
     e06:	ea 81       	ldd	r30, Y+2	; 0x02
     e08:	fb 81       	ldd	r31, Y+3	; 0x03
     e0a:	84 81       	ldd	r24, Z+4	; 0x04
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	41 f4       	brne	.+16     	; 0xe20 <SPI_init+0x25e>
			{
				SET_BIT(SPCR,CPOL);
     e10:	ad e2       	ldi	r26, 0x2D	; 45
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ed e2       	ldi	r30, 0x2D	; 45
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	88 60       	ori	r24, 0x08	; 8
     e1c:	8c 93       	st	X, r24
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <SPI_init+0x26c>
			}
			else
			{
				CLEAR_BIT(SPCR,CPOL);
     e20:	ad e2       	ldi	r26, 0x2D	; 45
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ed e2       	ldi	r30, 0x2D	; 45
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	87 7f       	andi	r24, 0xF7	; 247
     e2c:	8c 93       	st	X, r24
			}
			if (SAMPLING_EDGE_TRAIL == cfg->Phase_Mode)
     e2e:	ea 81       	ldd	r30, Y+2	; 0x02
     e30:	fb 81       	ldd	r31, Y+3	; 0x03
     e32:	85 81       	ldd	r24, Z+5	; 0x05
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	41 f4       	brne	.+16     	; 0xe48 <SPI_init+0x286>
			{
				SET_BIT(SPCR,CPHA);
     e38:	ad e2       	ldi	r26, 0x2D	; 45
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ed e2       	ldi	r30, 0x2D	; 45
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	8c 93       	st	X, r24
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <SPI_init+0x2ae>
			}
			else
			{
				CLEAR_BIT(SPCR,CPHA);
     e48:	ad e2       	ldi	r26, 0x2D	; 45
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ed e2       	ldi	r30, 0x2D	; 45
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8b 7f       	andi	r24, 0xFB	; 251
     e54:	8c 93       	st	X, r24
     e56:	0c c0       	rjmp	.+24     	; 0xe70 <SPI_init+0x2ae>
			}

		}
		else
		{
			status = ERROR_NOK;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <SPI_init+0x2ae>
		}
		/*SET_BIT(SPCR,SPE);*/
	}
	else
	{
		status = ERROR_NOK;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(SPCR,SPE);
     e62:	ad e2       	ldi	r26, 0x2D	; 45
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ed e2       	ldi	r30, 0x2D	; 45
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 7b       	andi	r24, 0xBF	; 191
     e6e:	8c 93       	st	X, r24
	}
	SET_BIT(SPCR,SPE);
     e70:	ad e2       	ldi	r26, 0x2D	; 45
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ed e2       	ldi	r30, 0x2D	; 45
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	80 64       	ori	r24, 0x40	; 64
     e7c:	8c 93       	st	X, r24
	return status;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <SPI_sendByte>:
 * @return: returns error status
 * Description: Function to send data byte using SPI
 **************************************************************************/

uint8_t SPI_sendByte(const uint8_t data)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <SPI_sendByte+0x6>
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;
	if (SPI_POLLING == gu8_Int)
     e98:	80 91 81 01 	lds	r24, 0x0181
     e9c:	88 23       	and	r24, r24
     e9e:	51 f4       	brne	.+20     	; 0xeb4 <SPI_sendByte+0x28>
	{
		SPDR = data;
     ea0:	ef e2       	ldi	r30, 0x2F	; 47
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(SPSR,SPIF)){}
     ea8:	ee e2       	ldi	r30, 0x2E	; 46
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 23       	and	r24, r24
     eb0:	dc f7       	brge	.-10     	; 0xea8 <SPI_sendByte+0x1c>
     eb2:	0e c0       	rjmp	.+28     	; 0xed0 <SPI_sendByte+0x44>
	}
	else if (SPI_INTERRUPT == gu8_Int)
     eb4:	80 91 81 01 	lds	r24, 0x0181
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	51 f4       	brne	.+20     	; 0xed0 <SPI_sendByte+0x44>
	{
		gu8_Var = data;
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	80 93 82 01 	sts	0x0182, r24
		SET_BIT(SPCR,SPIE);
     ec2:	ad e2       	ldi	r26, 0x2D	; 45
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ed e2       	ldi	r30, 0x2D	; 45
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 68       	ori	r24, 0x80	; 128
     ece:	8c 93       	st	X, r24
	}
	return status;
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <SPI_receiveByte>:
 * @return: returns error status
 * Description: Function to receive data byte using SPI
 **************************************************************************/

uint8_t SPI_receiveByte(uint8_t *data)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <SPI_receiveByte+0x6>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	9b 83       	std	Y+3, r25	; 0x03
     eea:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;
	if (SPI_POLLING == gu8_Int)
     eec:	80 91 81 01 	lds	r24, 0x0181
     ef0:	88 23       	and	r24, r24
     ef2:	61 f4       	brne	.+24     	; 0xf0c <SPI_receiveByte+0x30>
	{
		while (BIT_IS_CLEAR(SPSR,SPIF)){}
     ef4:	ee e2       	ldi	r30, 0x2E	; 46
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	88 23       	and	r24, r24
     efc:	dc f7       	brge	.-10     	; 0xef4 <SPI_receiveByte+0x18>
		*data=SPDR;
     efe:	ef e2       	ldi	r30, 0x2F	; 47
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	ea 81       	ldd	r30, Y+2	; 0x02
     f06:	fb 81       	ldd	r31, Y+3	; 0x03
     f08:	80 83       	st	Z, r24
     f0a:	0b c0       	rjmp	.+22     	; 0xf22 <SPI_receiveByte+0x46>
	}
	else if (SPI_INTERRUPT == gu8_Int)
     f0c:	80 91 81 01 	lds	r24, 0x0181
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	39 f4       	brne	.+14     	; 0xf22 <SPI_receiveByte+0x46>
	{
		SET_BIT(SPCR,SPIE);
     f14:	ad e2       	ldi	r26, 0x2D	; 45
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ed e2       	ldi	r30, 0x2D	; 45
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	8c 93       	st	X, r24
	}
	return status;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <SPI_sendString>:
 * @return: returns error status
 * Description: Function to receive data byte using SPI
 **************************************************************************/

uint8_t SPI_sendString(const uint8_t *Str)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <SPI_sendString+0x6>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <SPI_sendString+0x8>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	9c 83       	std	Y+4, r25	; 0x04
     f3e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t status;
	uint8_t loop = 0;
     f40:	19 82       	std	Y+1, r1	; 0x01
     f42:	0e c0       	rjmp	.+28     	; 0xf60 <SPI_sendString+0x30>
	while(Str[loop] != '\0')
	{
		SPI_sendByte(Str[loop]);
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	fc 01       	movw	r30, r24
     f50:	e2 0f       	add	r30, r18
     f52:	f3 1f       	adc	r31, r19
     f54:	80 81       	ld	r24, Z
     f56:	0e 94 46 07 	call	0xe8c	; 0xe8c <SPI_sendByte>
		loop++;
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	89 83       	std	Y+1, r24	; 0x01

uint8_t SPI_sendString(const uint8_t *Str)
{
	uint8_t status;
	uint8_t loop = 0;
	while(Str[loop] != '\0')
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	80 81       	ld	r24, Z
     f72:	88 23       	and	r24, r24
     f74:	39 f7       	brne	.-50     	; 0xf44 <SPI_sendString+0x14>
	{
		SPI_sendByte(Str[loop]);
		loop++;
	}
	return status;
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <SPI_receiveString>:
 * @return: returns error status
 * Description: Function to receive data byte using SPI
 **************************************************************************/

uint8_t SPI_receiveString(uint8_t *Str)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <SPI_receiveString+0x6>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <SPI_receiveString+0x8>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	9c 83       	std	Y+4, r25	; 0x04
     f94:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t status;
	uint8_t loop = 0;
     f96:	19 82       	std	Y+1, r1	; 0x01
	SPI_receiveByte(&Str[loop]);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	0e 94 6e 07 	call	0xedc	; 0xedc <SPI_receiveByte>
     faa:	0c c0       	rjmp	.+24     	; 0xfc4 <SPI_receiveString+0x3e>
	while(Str[loop] != '#')
	{
		loop++;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	89 83       	std	Y+1, r24	; 0x01
		SPI_receiveByte(&Str[loop]);
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	82 0f       	add	r24, r18
     fbe:	93 1f       	adc	r25, r19
     fc0:	0e 94 6e 07 	call	0xedc	; 0xedc <SPI_receiveByte>
uint8_t SPI_receiveString(uint8_t *Str)
{
	uint8_t status;
	uint8_t loop = 0;
	SPI_receiveByte(&Str[loop]);
	while(Str[loop] != '#')
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	fc 01       	movw	r30, r24
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	80 81       	ld	r24, Z
     fd6:	83 32       	cpi	r24, 0x23	; 35
     fd8:	49 f7       	brne	.-46     	; 0xfac <SPI_receiveString+0x26>
	{
		loop++;
		SPI_receiveByte(&Str[loop]);
	}
	Str[loop] = '\0';
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	fc 01       	movw	r30, r24
     fe6:	e2 0f       	add	r30, r18
     fe8:	f3 1f       	adc	r31, r19
     fea:	10 82       	st	Z, r1
	return status;
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <__vector_14>:
void __vector_14(void)__attribute((signal,used));

void __vector_13(void)__attribute((signal,used));

void __vector_14 (void)  /************************** ISR For SENDING**********************/
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	8f 93       	push	r24
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
	UDR = gu8_DataTransmit ;
    1018:	ec e2       	ldi	r30, 0x2C	; 44
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 91 96 01 	lds	r24, 0x0196
    1020:	80 83       	st	Z, r24
	CLEAR_BIT(UCSRB,UDRIE);
    1022:	aa e2       	ldi	r26, 0x2A	; 42
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ea e2       	ldi	r30, 0x2A	; 42
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7d       	andi	r24, 0xDF	; 223
    102e:	8c 93       	st	X, r24
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	bf 91       	pop	r27
    103a:	af 91       	pop	r26
    103c:	8f 91       	pop	r24
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <__vector_13>:
void __vector_13 (void)
{
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	11 24       	eor	r1, r1
    1052:	8f 93       	push	r24
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
		gu8_DataReceive = UDR ;
    1060:	ec e2       	ldi	r30, 0x2C	; 44
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	80 93 95 01 	sts	0x0195, r24
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	ff 91       	pop	r31
    1070:	ef 91       	pop	r30
    1072:	8f 91       	pop	r24
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
UART_ERROR UART_init(const strUART_Config *UART_Cfg)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	61 97       	sbiw	r28, 0x11	; 17
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	9b 83       	std	Y+3, r25	; 0x03
    1094:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ERROR  = ERROR_OK;
    1096:	19 82       	std	Y+1, r1	; 0x01
		/**********************Configuration of Duplex Transmission**********************/
	switch(UART_Cfg->u8_Duplex)
    1098:	ea 81       	ldd	r30, Y+2	; 0x02
    109a:	fb 81       	ldd	r31, Y+3	; 0x03
    109c:	80 85       	ldd	r24, Z+8	; 0x08
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	39 8b       	std	Y+17, r19	; 0x11
    10a4:	28 8b       	std	Y+16, r18	; 0x10
    10a6:	88 89       	ldd	r24, Y+16	; 0x10
    10a8:	99 89       	ldd	r25, Y+17	; 0x11
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	c1 f0       	breq	.+48     	; 0x10e0 <UART_init+0x62>
    10b0:	28 89       	ldd	r18, Y+16	; 0x10
    10b2:	39 89       	ldd	r19, Y+17	; 0x11
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	d9 f0       	breq	.+54     	; 0x10f0 <UART_init+0x72>
    10ba:	88 89       	ldd	r24, Y+16	; 0x10
    10bc:	99 89       	ldd	r25, Y+17	; 0x11
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	f1 f4       	brne	.+60     	; 0x10fe <UART_init+0x80>
	{
		case FULL_DUPLEX :
		SET_BIT(UCSRB,RXEN) ;
    10c2:	aa e2       	ldi	r26, 0x2A	; 42
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ea e2       	ldi	r30, 0x2A	; 42
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 61       	ori	r24, 0x10	; 16
    10ce:	8c 93       	st	X, r24
		SET_BIT(UCSRB,TXEN) ;
    10d0:	aa e2       	ldi	r26, 0x2A	; 42
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ea e2       	ldi	r30, 0x2A	; 42
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	88 60       	ori	r24, 0x08	; 8
    10dc:	8c 93       	st	X, r24
    10de:	0f c0       	rjmp	.+30     	; 0x10fe <UART_init+0x80>
		break;
		
		case TRANSIMETER :
		SET_BIT(UCSRB,TXEN) ;
    10e0:	aa e2       	ldi	r26, 0x2A	; 42
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ea e2       	ldi	r30, 0x2A	; 42
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 60       	ori	r24, 0x08	; 8
    10ec:	8c 93       	st	X, r24
    10ee:	07 c0       	rjmp	.+14     	; 0x10fe <UART_init+0x80>
		break;		
		
		case RECEIVER :
		SET_BIT(UCSRB,TXEN) ;
    10f0:	aa e2       	ldi	r26, 0x2A	; 42
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ea e2       	ldi	r30, 0x2A	; 42
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	88 60       	ori	r24, 0x08	; 8
    10fc:	8c 93       	st	X, r24
	}


	/******************Checking Speed Mode & BAUDRATE ************************************/
	//CLEAR_BIT(UBRRH,URSEL) ; /***********************to Write in UBRRH REGISTERS***********/
		switch(UART_Cfg->u8_SpeedMode)
    10fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1100:	fb 81       	ldd	r31, Y+3	; 0x03
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3f 87       	std	Y+15, r19	; 0x0f
    110a:	2e 87       	std	Y+14, r18	; 0x0e
    110c:	8e 85       	ldd	r24, Y+14	; 0x0e
    110e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	31 f0       	breq	.+12     	; 0x1120 <UART_init+0xa2>
    1114:	2e 85       	ldd	r18, Y+14	; 0x0e
    1116:	3f 85       	ldd	r19, Y+15	; 0x0f
    1118:	21 30       	cpi	r18, 0x01	; 1
    111a:	31 05       	cpc	r19, r1
    111c:	81 f0       	breq	.+32     	; 0x113e <UART_init+0xc0>
    111e:	1e c0       	rjmp	.+60     	; 0x115c <UART_init+0xde>
		{
		case NORMAL_SPEED :
		CLEAR_BIT(UCSRA,U2X);
    1120:	ab e2       	ldi	r26, 0x2B	; 43
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	eb e2       	ldi	r30, 0x2B	; 43
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8d 7f       	andi	r24, 0xFD	; 253
    112c:	8c 93       	st	X, r24
		/**************************BAUDRATE****************************************/
		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = BAUD_PRESCALE_SINGLE>>8;
    112e:	e0 e4       	ldi	r30, 0x40	; 64
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	10 82       	st	Z, r1
		UBRRL = BAUD_PRESCALE_SINGLE;
    1134:	e9 e2       	ldi	r30, 0x29	; 41
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	83 e3       	ldi	r24, 0x33	; 51
    113a:	80 83       	st	Z, r24
    113c:	11 c0       	rjmp	.+34     	; 0x1160 <UART_init+0xe2>
		break;
			
		case DOUBLE_SPEED :
		SET_BIT(UCSRA,U2X) ;
    113e:	ab e2       	ldi	r26, 0x2B	; 43
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e2       	ldi	r30, 0x2B	; 43
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	82 60       	ori	r24, 0x02	; 2
    114a:	8c 93       	st	X, r24
			/**************************BAUDRATE****************************************/
			/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = BAUD_PRESCALE_DOUBLE>>8;
    114c:	e0 e4       	ldi	r30, 0x40	; 64
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	10 82       	st	Z, r1
		UBRRL = BAUD_PRESCALE_DOUBLE;
    1152:	e9 e2       	ldi	r30, 0x29	; 41
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	87 e6       	ldi	r24, 0x67	; 103
    1158:	80 83       	st	Z, r24
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <UART_init+0xe2>
		break;
		default :
		ERROR = ERROR_NOK ;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01
		break ;
	}
	/**********************Synchronous or Asynchronous Operation **************/
	//SET_BIT(UCSRC,URSEL) ; /******************Setting to Access UCRSC Register********/
	switch(UART_Cfg->u8_Sync)
    1160:	ea 81       	ldd	r30, Y+2	; 0x02
    1162:	fb 81       	ldd	r31, Y+3	; 0x03
    1164:	83 81       	ldd	r24, Z+3	; 0x03
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3d 87       	std	Y+13, r19	; 0x0d
    116c:	2c 87       	std	Y+12, r18	; 0x0c
    116e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1170:	9d 85       	ldd	r25, Y+13	; 0x0d
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	31 f0       	breq	.+12     	; 0x1182 <UART_init+0x104>
    1176:	2c 85       	ldd	r18, Y+12	; 0x0c
    1178:	3d 85       	ldd	r19, Y+13	; 0x0d
    117a:	21 30       	cpi	r18, 0x01	; 1
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <UART_init+0x122>
    1180:	17 c0       	rjmp	.+46     	; 0x11b0 <UART_init+0x132>
	{
		case SYNCHRONOUS:
			SET_BIT(UCSRC,URSEL) ;
    1182:	a0 e4       	ldi	r26, 0x40	; 64
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e0 e4       	ldi	r30, 0x40	; 64
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 68       	ori	r24, 0x80	; 128
    118e:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UMSEL);
    1190:	a0 e4       	ldi	r26, 0x40	; 64
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e0 e4       	ldi	r30, 0x40	; 64
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 64       	ori	r24, 0x40	; 64
    119c:	8c 93       	st	X, r24
    119e:	0a c0       	rjmp	.+20     	; 0x11b4 <UART_init+0x136>
			break;
		case ASYNCHRONOUS:
			CLEAR_BIT(UCSRC,UMSEL);
    11a0:	a0 e4       	ldi	r26, 0x40	; 64
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e0 e4       	ldi	r30, 0x40	; 64
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8f 7b       	andi	r24, 0xBF	; 191
    11ac:	8c 93       	st	X, r24
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <UART_init+0x136>
			break ;
		default:
			ERROR = ERROR_NOK ;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
	}
	/***********************FRAME DATA BITS*************************************/
	switch(UART_Cfg->u8_DataBits)
    11b4:	ea 81       	ldd	r30, Y+2	; 0x02
    11b6:	fb 81       	ldd	r31, Y+3	; 0x03
    11b8:	84 81       	ldd	r24, Z+4	; 0x04
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3b 87       	std	Y+11, r19	; 0x0b
    11c0:	2a 87       	std	Y+10, r18	; 0x0a
    11c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11c6:	87 30       	cpi	r24, 0x07	; 7
    11c8:	91 05       	cpc	r25, r1
    11ca:	c9 f1       	breq	.+114    	; 0x123e <UART_init+0x1c0>
    11cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    11ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    11d0:	28 30       	cpi	r18, 0x08	; 8
    11d2:	31 05       	cpc	r19, r1
    11d4:	5c f4       	brge	.+22     	; 0x11ec <UART_init+0x16e>
    11d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11da:	85 30       	cpi	r24, 0x05	; 5
    11dc:	91 05       	cpc	r25, r1
    11de:	89 f0       	breq	.+34     	; 0x1202 <UART_init+0x184>
    11e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    11e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    11e4:	26 30       	cpi	r18, 0x06	; 6
    11e6:	31 05       	cpc	r19, r1
    11e8:	11 f1       	breq	.+68     	; 0x122e <UART_init+0x1b0>
    11ea:	41 c0       	rjmp	.+130    	; 0x126e <UART_init+0x1f0>
    11ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	91 05       	cpc	r25, r1
    11f4:	61 f1       	breq	.+88     	; 0x124e <UART_init+0x1d0>
    11f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    11f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    11fa:	29 30       	cpi	r18, 0x09	; 9
    11fc:	31 05       	cpc	r19, r1
    11fe:	79 f1       	breq	.+94     	; 0x125e <UART_init+0x1e0>
    1200:	36 c0       	rjmp	.+108    	; 0x126e <UART_init+0x1f0>
	{
		case FIVE_BITS:
			CLEAR_BIT(UCSRC,UCSZ0) ;
    1202:	a0 e4       	ldi	r26, 0x40	; 64
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e0 e4       	ldi	r30, 0x40	; 64
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8d 7f       	andi	r24, 0xFD	; 253
    120e:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ1) ;
    1210:	a0 e4       	ldi	r26, 0x40	; 64
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e0 e4       	ldi	r30, 0x40	; 64
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8b 7f       	andi	r24, 0xFB	; 251
    121c:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB,UCSZ2) ;
    121e:	aa e2       	ldi	r26, 0x2A	; 42
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ea e2       	ldi	r30, 0x2A	; 42
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8b 7f       	andi	r24, 0xFB	; 251
    122a:	8c 93       	st	X, r24
    122c:	22 c0       	rjmp	.+68     	; 0x1272 <UART_init+0x1f4>
			break; 
			
		case SIX_BITS:
			UCSRC |= (1<<UCSZ0) | (1<<URSEL) ;
    122e:	a0 e4       	ldi	r26, 0x40	; 64
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e0 e4       	ldi	r30, 0x40	; 64
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	82 68       	ori	r24, 0x82	; 130
    123a:	8c 93       	st	X, r24
    123c:	1a c0       	rjmp	.+52     	; 0x1272 <UART_init+0x1f4>

			break;
			
		case SEVEN_BITS:
			UCSRC |= (1<< UCSZ1) | (1<<URSEL);
    123e:	a0 e4       	ldi	r26, 0x40	; 64
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e0 e4       	ldi	r30, 0x40	; 64
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	84 68       	ori	r24, 0x84	; 132
    124a:	8c 93       	st	X, r24
    124c:	12 c0       	rjmp	.+36     	; 0x1272 <UART_init+0x1f4>

			break;
			
		case EIGHT_BITS:
			UCSRC |= (1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL);		
    124e:	a0 e4       	ldi	r26, 0x40	; 64
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e0 e4       	ldi	r30, 0x40	; 64
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	86 68       	ori	r24, 0x86	; 134
    125a:	8c 93       	st	X, r24
    125c:	0a c0       	rjmp	.+20     	; 0x1272 <UART_init+0x1f4>

			break;
			
		case NINE_BITS:
			UCSRC |= (1<< UCSZ1) | (1<< UCSZ0) | (1<<UCSZ2) | (1<<URSEL);
    125e:	a0 e4       	ldi	r26, 0x40	; 64
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e0 e4       	ldi	r30, 0x40	; 64
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	86 68       	ori	r24, 0x86	; 134
    126a:	8c 93       	st	X, r24
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <UART_init+0x1f4>

			break;	
		default:
			ERROR = ERROR_NOK ;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	89 83       	std	Y+1, r24	; 0x01
	}
	

	
	/****************************PARITY CHECKING****************************/
	switch(UART_Cfg->u8_Parity)
    1272:	ea 81       	ldd	r30, Y+2	; 0x02
    1274:	fb 81       	ldd	r31, Y+3	; 0x03
    1276:	85 81       	ldd	r24, Z+5	; 0x05
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	39 87       	std	Y+9, r19	; 0x09
    127e:	28 87       	std	Y+8, r18	; 0x08
    1280:	88 85       	ldd	r24, Y+8	; 0x08
    1282:	99 85       	ldd	r25, Y+9	; 0x09
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	c1 f0       	breq	.+48     	; 0x12ba <UART_init+0x23c>
    128a:	28 85       	ldd	r18, Y+8	; 0x08
    128c:	39 85       	ldd	r19, Y+9	; 0x09
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	11 f1       	breq	.+68     	; 0x12d8 <UART_init+0x25a>
    1294:	88 85       	ldd	r24, Y+8	; 0x08
    1296:	99 85       	ldd	r25, Y+9	; 0x09
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	69 f5       	brne	.+90     	; 0x12f6 <UART_init+0x278>
	{
		case PARITY_DISABLED:
			CLEAR_BIT(UCSRC,UPM1);
    129c:	a0 e4       	ldi	r26, 0x40	; 64
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e0 e4       	ldi	r30, 0x40	; 64
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7d       	andi	r24, 0xDF	; 223
    12a8:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UPM0);
    12aa:	a0 e4       	ldi	r26, 0x40	; 64
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e0 e4       	ldi	r30, 0x40	; 64
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8f 7e       	andi	r24, 0xEF	; 239
    12b6:	8c 93       	st	X, r24
    12b8:	20 c0       	rjmp	.+64     	; 0x12fa <UART_init+0x27c>
			break;
		case EVEN_PARITY:
			SET_BIT(UCSRC,UPM1);
    12ba:	a0 e4       	ldi	r26, 0x40	; 64
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e0 e4       	ldi	r30, 0x40	; 64
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	80 62       	ori	r24, 0x20	; 32
    12c6:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UPM0);
    12c8:	a0 e4       	ldi	r26, 0x40	; 64
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e0 e4       	ldi	r30, 0x40	; 64
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7e       	andi	r24, 0xEF	; 239
    12d4:	8c 93       	st	X, r24
    12d6:	11 c0       	rjmp	.+34     	; 0x12fa <UART_init+0x27c>
			break;
		case ODD_PARITY:
			SET_BIT(UCSRC,UPM1);
    12d8:	a0 e4       	ldi	r26, 0x40	; 64
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e0 e4       	ldi	r30, 0x40	; 64
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	80 62       	ori	r24, 0x20	; 32
    12e4:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UPM0);
    12e6:	a0 e4       	ldi	r26, 0x40	; 64
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e0 e4       	ldi	r30, 0x40	; 64
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 61       	ori	r24, 0x10	; 16
    12f2:	8c 93       	st	X, r24
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <UART_init+0x27c>
			break;
		default:
			ERROR = ERROR_NOK ;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/************************** STOP BITS************************************/
	switch(UART_Cfg->u8_StopBits)
    12fa:	ea 81       	ldd	r30, Y+2	; 0x02
    12fc:	fb 81       	ldd	r31, Y+3	; 0x03
    12fe:	86 81       	ldd	r24, Z+6	; 0x06
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3f 83       	std	Y+7, r19	; 0x07
    1306:	2e 83       	std	Y+6, r18	; 0x06
    1308:	8e 81       	ldd	r24, Y+6	; 0x06
    130a:	9f 81       	ldd	r25, Y+7	; 0x07
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	31 f0       	breq	.+12     	; 0x131c <UART_init+0x29e>
    1310:	2e 81       	ldd	r18, Y+6	; 0x06
    1312:	3f 81       	ldd	r19, Y+7	; 0x07
    1314:	21 30       	cpi	r18, 0x01	; 1
    1316:	31 05       	cpc	r19, r1
    1318:	49 f0       	breq	.+18     	; 0x132c <UART_init+0x2ae>
    131a:	10 c0       	rjmp	.+32     	; 0x133c <UART_init+0x2be>
	{
		case ONE_STOP:
			CLEAR_BIT(UCSRC,USBS) ;
    131c:	a0 e4       	ldi	r26, 0x40	; 64
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e0 e4       	ldi	r30, 0x40	; 64
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	87 7f       	andi	r24, 0xF7	; 247
    1328:	8c 93       	st	X, r24
    132a:	0a c0       	rjmp	.+20     	; 0x1340 <UART_init+0x2c2>
			break;
		case TWO_STOP:
			SET_BIT(UCSRC,USBS) ;
    132c:	a0 e4       	ldi	r26, 0x40	; 64
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e0 e4       	ldi	r30, 0x40	; 64
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	88 60       	ori	r24, 0x08	; 8
    1338:	8c 93       	st	X, r24
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <UART_init+0x2c2>

			break;
		default:
			ERROR = ERROR_NOK ;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	89 83       	std	Y+1, r24	; 0x01
			break;		
	}
	/********************Interrup or Polling Mode****************************/
	switch(UART_Cfg->u8_Interrupt)
    1340:	ea 81       	ldd	r30, Y+2	; 0x02
    1342:	fb 81       	ldd	r31, Y+3	; 0x03
    1344:	87 81       	ldd	r24, Z+7	; 0x07
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3d 83       	std	Y+5, r19	; 0x05
    134c:	2c 83       	std	Y+4, r18	; 0x04
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	31 f0       	breq	.+12     	; 0x1362 <UART_init+0x2e4>
    1356:	2c 81       	ldd	r18, Y+4	; 0x04
    1358:	3d 81       	ldd	r19, Y+5	; 0x05
    135a:	21 30       	cpi	r18, 0x01	; 1
    135c:	31 05       	cpc	r19, r1
    135e:	c9 f0       	breq	.+50     	; 0x1392 <UART_init+0x314>
    1360:	16 c0       	rjmp	.+44     	; 0x138e <UART_init+0x310>
	{
		case INTERRUPT_MODE:
		SET_BIT(UCSRB,TXCIE) ;
    1362:	aa e2       	ldi	r26, 0x2A	; 42
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ea e2       	ldi	r30, 0x2A	; 42
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 64       	ori	r24, 0x40	; 64
    136e:	8c 93       	st	X, r24
		SET_BIT(UCSRB,RXCIE) ;
    1370:	aa e2       	ldi	r26, 0x2A	; 42
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ea e2       	ldi	r30, 0x2A	; 42
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	80 68       	ori	r24, 0x80	; 128
    137c:	8c 93       	st	X, r24
		SET_BIT(SREG,I) ;
    137e:	af e5       	ldi	r26, 0x5F	; 95
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ef e5       	ldi	r30, 0x5F	; 95
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	8c 93       	st	X, r24
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <UART_init+0x314>
		break;
		case POLLING_MODE:
		break;
		default:
		ERROR = ERROR_NOK ;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ERROR ;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	61 96       	adiw	r28, 0x11	; 17
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <UART_sendByte>:
	
UART_ERROR UART_sendByte(const uint16_t data)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <UART_sendByte+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
	/*************running on interrupt Mode************/
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
	/*gu8_DataTransmit = data ;
	SET_BIT(UCSRB,UDRIE) ;*/
	/************running on Polling Mode*************/
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    13b4:	eb e2       	ldi	r30, 0x2B	; 43
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	80 72       	andi	r24, 0x20	; 32
    13c0:	90 70       	andi	r25, 0x00	; 0
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	b9 f3       	breq	.-18     	; 0x13b4 <UART_sendByte+0xe>
	UDR = data;
    13c6:	ec e2       	ldi	r30, 0x2C	; 44
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	80 83       	st	Z, r24
	return ERROR_OK ;
    13ce:	80 e0       	ldi	r24, 0x00	; 0
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <UART_recieveByte>:

UART_ERROR UART_recieveByte(uint8_t *pu8_Received_Data)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <UART_recieveByte+0x6>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
	/***********Receiving on Inerrupt Mode*********/
	/*SET_BIT(UCSRB,RXCIE) ;
	*pu8_Received_Data = gu8_DataReceive;*/
	/***********Polling on Mode*********************/
	while(BIT_IS_CLEAR(UCSRA,RXC)){}	 
    13e8:	eb e2       	ldi	r30, 0x2B	; 43
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	88 23       	and	r24, r24
    13f0:	dc f7       	brge	.-10     	; 0x13e8 <UART_recieveByte+0xe>
    *pu8_Received_Data = UDR;
    13f2:	ec e2       	ldi	r30, 0x2C	; 44
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	fa 81       	ldd	r31, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
   return ERROR_OK;
    13fe:	80 e0       	ldi	r24, 0x00	; 0
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <__vector_11>:
extern volatile uint8_t Velocity ;
volatile uint32_t Former_Ignite ;
void __vector_11(void)__attribute((signal,used));

void __vector_11 (void)
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	2f 93       	push	r18
    141e:	3f 93       	push	r19
    1420:	4f 93       	push	r20
    1422:	5f 93       	push	r21
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	if(Ticks != 0)
    1438:	80 91 9f 01 	lds	r24, 0x019F
    143c:	90 91 a0 01 	lds	r25, 0x01A0
    1440:	a0 91 a1 01 	lds	r26, 0x01A1
    1444:	b0 91 a2 01 	lds	r27, 0x01A2
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	a1 05       	cpc	r26, r1
    144c:	b1 05       	cpc	r27, r1
    144e:	09 f4       	brne	.+2      	; 0x1452 <__vector_11+0x48>
    1450:	63 c0       	rjmp	.+198    	; 0x1518 <__vector_11+0x10e>
	{
		if(Ticks < (Timer0_OVF_Val))
    1452:	80 91 9f 01 	lds	r24, 0x019F
    1456:	90 91 a0 01 	lds	r25, 0x01A0
    145a:	a0 91 a1 01 	lds	r26, 0x01A1
    145e:	b0 91 a2 01 	lds	r27, 0x01A2
    1462:	8f 3f       	cpi	r24, 0xFF	; 255
    1464:	91 05       	cpc	r25, r1
    1466:	a1 05       	cpc	r26, r1
    1468:	b1 05       	cpc	r27, r1
    146a:	80 f5       	brcc	.+96     	; 0x14cc <__vector_11+0xc2>
		{
			/*Initializing the Timer Register*/
			TCNT0 = Timer0_OVF_Val-Ticks;
    146c:	e2 e5       	ldi	r30, 0x52	; 82
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 91 9f 01 	lds	r24, 0x019F
    1474:	90 91 a0 01 	lds	r25, 0x01A0
    1478:	a0 91 a1 01 	lds	r26, 0x01A1
    147c:	b0 91 a2 01 	lds	r27, 0x01A2
    1480:	80 95       	com	r24
    1482:	80 83       	st	Z, r24
			Ticks = Ticks - Ticks ;
    1484:	20 91 9f 01 	lds	r18, 0x019F
    1488:	30 91 a0 01 	lds	r19, 0x01A0
    148c:	40 91 a1 01 	lds	r20, 0x01A1
    1490:	50 91 a2 01 	lds	r21, 0x01A2
    1494:	80 91 9f 01 	lds	r24, 0x019F
    1498:	90 91 a0 01 	lds	r25, 0x01A0
    149c:	a0 91 a1 01 	lds	r26, 0x01A1
    14a0:	b0 91 a2 01 	lds	r27, 0x01A2
    14a4:	79 01       	movw	r14, r18
    14a6:	8a 01       	movw	r16, r20
    14a8:	e8 1a       	sub	r14, r24
    14aa:	f9 0a       	sbc	r15, r25
    14ac:	0a 0b       	sbc	r16, r26
    14ae:	1b 0b       	sbc	r17, r27
    14b0:	d8 01       	movw	r26, r16
    14b2:	c7 01       	movw	r24, r14
    14b4:	80 93 9f 01 	sts	0x019F, r24
    14b8:	90 93 a0 01 	sts	0x01A0, r25
    14bc:	a0 93 a1 01 	sts	0x01A1, r26
    14c0:	b0 93 a2 01 	sts	0x01A2, r27
			PORTB = 0x00 ;
    14c4:	e8 e3       	ldi	r30, 0x38	; 56
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	10 82       	st	Z, r1
    14ca:	58 c0       	rjmp	.+176    	; 0x157c <__vector_11+0x172>
		}
		else if(Ticks >= (Timer0_OVF_Val))
    14cc:	80 91 9f 01 	lds	r24, 0x019F
    14d0:	90 91 a0 01 	lds	r25, 0x01A0
    14d4:	a0 91 a1 01 	lds	r26, 0x01A1
    14d8:	b0 91 a2 01 	lds	r27, 0x01A2
    14dc:	8f 3f       	cpi	r24, 0xFF	; 255
    14de:	91 05       	cpc	r25, r1
    14e0:	a1 05       	cpc	r26, r1
    14e2:	b1 05       	cpc	r27, r1
    14e4:	08 f4       	brcc	.+2      	; 0x14e8 <__vector_11+0xde>
    14e6:	4a c0       	rjmp	.+148    	; 0x157c <__vector_11+0x172>
		{
			/*Initializing the Timer Register*/
			TCNT0 = 0x00 ;
    14e8:	e2 e5       	ldi	r30, 0x52	; 82
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	10 82       	st	Z, r1
			Ticks = Ticks - Timer0_OVF_Val ;
    14ee:	80 91 9f 01 	lds	r24, 0x019F
    14f2:	90 91 a0 01 	lds	r25, 0x01A0
    14f6:	a0 91 a1 01 	lds	r26, 0x01A1
    14fa:	b0 91 a2 01 	lds	r27, 0x01A2
    14fe:	8f 5f       	subi	r24, 0xFF	; 255
    1500:	90 40       	sbci	r25, 0x00	; 0
    1502:	a0 40       	sbci	r26, 0x00	; 0
    1504:	b0 40       	sbci	r27, 0x00	; 0
    1506:	80 93 9f 01 	sts	0x019F, r24
    150a:	90 93 a0 01 	sts	0x01A0, r25
    150e:	a0 93 a1 01 	sts	0x01A1, r26
    1512:	b0 93 a2 01 	sts	0x01A2, r27
    1516:	32 c0       	rjmp	.+100    	; 0x157c <__vector_11+0x172>
		}
	}
	else if(Ticks == 0)
    1518:	80 91 9f 01 	lds	r24, 0x019F
    151c:	90 91 a0 01 	lds	r25, 0x01A0
    1520:	a0 91 a1 01 	lds	r26, 0x01A1
    1524:	b0 91 a2 01 	lds	r27, 0x01A2
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 05       	cpc	r26, r1
    152c:	b1 05       	cpc	r27, r1
    152e:	31 f5       	brne	.+76     	; 0x157c <__vector_11+0x172>
	{
		Ticks = Initial_ticks ;
    1530:	80 91 86 01 	lds	r24, 0x0186
    1534:	90 91 87 01 	lds	r25, 0x0187
    1538:	a0 91 88 01 	lds	r26, 0x0188
    153c:	b0 91 89 01 	lds	r27, 0x0189
    1540:	80 93 9f 01 	sts	0x019F, r24
    1544:	90 93 a0 01 	sts	0x01A0, r25
    1548:	a0 93 a1 01 	sts	0x01A1, r26
    154c:	b0 93 a2 01 	sts	0x01A2, r27
		TCNT0 = 0x00 ;
    1550:	e2 e5       	ldi	r30, 0x52	; 82
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	10 82       	st	Z, r1
		Ignite_Flag_Var ++ ;
    1556:	80 91 97 01 	lds	r24, 0x0197
    155a:	90 91 98 01 	lds	r25, 0x0198
    155e:	a0 91 99 01 	lds	r26, 0x0199
    1562:	b0 91 9a 01 	lds	r27, 0x019A
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	a1 1d       	adc	r26, r1
    156a:	b1 1d       	adc	r27, r1
    156c:	80 93 97 01 	sts	0x0197, r24
    1570:	90 93 98 01 	sts	0x0198, r25
    1574:	a0 93 99 01 	sts	0x0199, r26
    1578:	b0 93 9a 01 	sts	0x019A, r27
	}
}
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <Timer_Stop_0>:
void Timer_Stop_0(void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	// Cutting the Source Clock
	CLEAR_BIT(TCCR0,CS02) ;
    15ae:	a3 e5       	ldi	r26, 0x53	; 83
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e3 e5       	ldi	r30, 0x53	; 83
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8b 7f       	andi	r24, 0xFB	; 251
    15ba:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01) ;
    15bc:	a3 e5       	ldi	r26, 0x53	; 83
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e3 e5       	ldi	r30, 0x53	; 83
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8d 7f       	andi	r24, 0xFD	; 253
    15c8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS00) ;
    15ca:	a3 e5       	ldi	r26, 0x53	; 83
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e3 e5       	ldi	r30, 0x53	; 83
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8e 7f       	andi	r24, 0xFE	; 254
    15d6:	8c 93       	st	X, r24
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <Timer_Stop_1>:
void Timer_Stop_1(void)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	// Cutting the Source Clock
	CLEAR_BIT(TCCR1B,CS12) ;
    15e6:	ae e4       	ldi	r26, 0x4E	; 78
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ee e4       	ldi	r30, 0x4E	; 78
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8b 7f       	andi	r24, 0xFB	; 251
    15f2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11) ;
    15f4:	ae e4       	ldi	r26, 0x4E	; 78
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ee e4       	ldi	r30, 0x4E	; 78
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8d 7f       	andi	r24, 0xFD	; 253
    1600:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS10) ;
    1602:	ae e4       	ldi	r26, 0x4E	; 78
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ee e4       	ldi	r30, 0x4E	; 78
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8e 7f       	andi	r24, 0xFE	; 254
    160e:	8c 93       	st	X, r24
}
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <Timer_Stop_2>:
void Timer_Stop_2(void)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	// Cutting the Source Clock
	CLEAR_BIT(TCCR2,CS22) ;
    161e:	a5 e4       	ldi	r26, 0x45	; 69
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e4       	ldi	r30, 0x45	; 69
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	8b 7f       	andi	r24, 0xFB	; 251
    162a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,CS21) ;
    162c:	a5 e4       	ldi	r26, 0x45	; 69
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e5 e4       	ldi	r30, 0x45	; 69
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8d 7f       	andi	r24, 0xFD	; 253
    1638:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,CS20) ;
    163a:	a5 e4       	ldi	r26, 0x45	; 69
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e4       	ldi	r30, 0x45	; 69
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8e 7f       	andi	r24, 0xFE	; 254
    1646:	8c 93       	st	X, r24
}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <Timer_Init>:
/**********************************************************************************************************************************************/
									/*Timer Initialization Function*/
/**********************************************************************************************************************************************/
uint8_t Timer_Init(Timer_Configuration_S_H* Confg_S)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <Timer_Init+0x6>
    1654:	00 d0       	rcall	.+0      	; 0x1656 <Timer_Init+0x8>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <Timer_Init+0xa>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
	/******************************************************************************************************************************************/
									/*Importing the Values Stored in the Configuration Structure*/
	/******************************************************************************************************************************************/
	uint8_t mode = Confg_S->Mode , timer_psc = Confg_S->Timer_Psc , timer_channel = Confg_S->Timer_Channel , timer_mode = Confg_S->Timer_Mode;
    1660:	ed 81       	ldd	r30, Y+5	; 0x05
    1662:	fe 81       	ldd	r31, Y+6	; 0x06
    1664:	83 81       	ldd	r24, Z+3	; 0x03
    1666:	8c 83       	std	Y+4, r24	; 0x04
    1668:	ed 81       	ldd	r30, Y+5	; 0x05
    166a:	fe 81       	ldd	r31, Y+6	; 0x06
    166c:	81 81       	ldd	r24, Z+1	; 0x01
    166e:	8b 83       	std	Y+3, r24	; 0x03
    1670:	ed 81       	ldd	r30, Y+5	; 0x05
    1672:	fe 81       	ldd	r31, Y+6	; 0x06
    1674:	80 81       	ld	r24, Z
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	ed 81       	ldd	r30, Y+5	; 0x05
    167a:	fe 81       	ldd	r31, Y+6	; 0x06
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
	/*Setting the Pre-Scalar Values*/
	Prescaller_Timer[timer_channel] = timer_psc ;
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	fc 01       	movw	r30, r24
    1688:	ed 57       	subi	r30, 0x7D	; 125
    168a:	fe 4f       	sbci	r31, 0xFE	; 254
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	80 83       	st	Z, r24
	if(timer_channel == 0)
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	88 23       	and	r24, r24
    1694:	b1 f4       	brne	.+44     	; 0x16c2 <Timer_Init+0x74>
	{
		// Wave Form Generation
		CLEAR_BIT(TCCR0,WGM00) ;
    1696:	a3 e5       	ldi	r26, 0x53	; 83
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e3 e5       	ldi	r30, 0x53	; 83
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8f 7b       	andi	r24, 0xBF	; 191
    16a2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01) ;
    16a4:	a3 e5       	ldi	r26, 0x53	; 83
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e3 e5       	ldi	r30, 0x53	; 83
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	87 7f       	andi	r24, 0xF7	; 247
    16b0:	8c 93       	st	X, r24
		// Enabling the Interrupt
		SET_BIT(TIMSK,TOIE0) ;
    16b2:	a9 e5       	ldi	r26, 0x59	; 89
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e9 e5       	ldi	r30, 0x59	; 89
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	81 60       	ori	r24, 0x01	; 1
    16be:	8c 93       	st	X, r24
    16c0:	3f c0       	rjmp	.+126    	; 0x1740 <Timer_Init+0xf2>
		//sei() ;
	}
	else if(timer_channel == 1)
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	21 f5       	brne	.+72     	; 0x1710 <Timer_Init+0xc2>
	{
		/*Clearing WGM10:11 on TCCRA First*/
		CLEAR_BIT(TCCR1A,WGM10) ;
    16c8:	af e4       	ldi	r26, 0x4F	; 79
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ef e4       	ldi	r30, 0x4F	; 79
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8e 7f       	andi	r24, 0xFE	; 254
    16d4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11) ;
    16d6:	af e4       	ldi	r26, 0x4F	; 79
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ef e4       	ldi	r30, 0x4F	; 79
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8d 7f       	andi	r24, 0xFD	; 253
    16e2:	8c 93       	st	X, r24
		/*Clearing WGM12:13 on TCCRB*/
		CLEAR_BIT(TCCR1B,WGM12) ;
    16e4:	ae e4       	ldi	r26, 0x4E	; 78
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	ee e4       	ldi	r30, 0x4E	; 78
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	87 7f       	andi	r24, 0xF7	; 247
    16f0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13) ;
    16f2:	ae e4       	ldi	r26, 0x4E	; 78
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ee e4       	ldi	r30, 0x4E	; 78
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7e       	andi	r24, 0xEF	; 239
    16fe:	8c 93       	st	X, r24
		/*Enabling the Overflow Interrupt*/
		SET_BIT(TIMSK,TOIE1) ;
    1700:	a9 e5       	ldi	r26, 0x59	; 89
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e9 e5       	ldi	r30, 0x59	; 89
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	84 60       	ori	r24, 0x04	; 4
    170c:	8c 93       	st	X, r24
    170e:	18 c0       	rjmp	.+48     	; 0x1740 <Timer_Init+0xf2>
		//sei() ;
	}
	else if(timer_channel == 2)
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	a9 f4       	brne	.+42     	; 0x1740 <Timer_Init+0xf2>
	{
		// Wave Form Generation
		CLEAR_BIT(TCCR0,WGM00) ;
    1716:	a3 e5       	ldi	r26, 0x53	; 83
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e3 e5       	ldi	r30, 0x53	; 83
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 7b       	andi	r24, 0xBF	; 191
    1722:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01) ;
    1724:	a3 e5       	ldi	r26, 0x53	; 83
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e3 e5       	ldi	r30, 0x53	; 83
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	87 7f       	andi	r24, 0xF7	; 247
    1730:	8c 93       	st	X, r24
		/// Enabling the Interrupt
		SET_BIT(TIMSK,TOIE0) ;
    1732:	a9 e5       	ldi	r26, 0x59	; 89
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e9 e5       	ldi	r30, 0x59	; 89
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	8c 93       	st	X, r24
		//sei() ;
	}
	return ERROR_OK ;
    1740:	80 e0       	ldi	r24, 0x00	; 0
}
    1742:	26 96       	adiw	r28, 0x06	; 6
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <Timer_Start>:
/**************************************************************************************************************************************/
												/*Creating Timer Start Function */
/**************************************************************************************************************************************/
uint8_t Timer_Start(uint8_t Timer_Channel,uint32_t Required_Time)
{
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	65 97       	sbiw	r28, 0x15	; 21
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	8d 87       	std	Y+13, r24	; 0x0d
    1772:	4e 87       	std	Y+14, r20	; 0x0e
    1774:	5f 87       	std	Y+15, r21	; 0x0f
    1776:	68 8b       	std	Y+16, r22	; 0x10
    1778:	79 8b       	std	Y+17, r23	; 0x11
	/*Declaring the Minimum Tick */
	double  tick_min = 0 ; 
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	89 87       	std	Y+9, r24	; 0x09
    1784:	9a 87       	std	Y+10, r25	; 0x0a
    1786:	ab 87       	std	Y+11, r26	; 0x0b
    1788:	bc 87       	std	Y+12, r27	; 0x0c
	if(Timer_Channel == 0)
    178a:	8d 85       	ldd	r24, Y+13	; 0x0d
    178c:	88 23       	and	r24, r24
    178e:	09 f0       	breq	.+2      	; 0x1792 <Timer_Start+0x3e>
    1790:	52 c1       	rjmp	.+676    	; 0x1a36 <Timer_Start+0x2e2>
	{
		/*Setting the Pre-Scalar Values*/
		switch (Prescaller_Timer[Timer_Channel])
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	fc 01       	movw	r30, r24
    179a:	ed 57       	subi	r30, 0x7D	; 125
    179c:	fe 4f       	sbci	r31, 0xFE	; 254
    179e:	80 81       	ld	r24, Z
    17a0:	e8 2e       	mov	r14, r24
    17a2:	ff 24       	eor	r15, r15
    17a4:	fd 8a       	std	Y+21, r15	; 0x15
    17a6:	ec 8a       	std	Y+20, r14	; 0x14
    17a8:	0c 89       	ldd	r16, Y+20	; 0x14
    17aa:	1d 89       	ldd	r17, Y+21	; 0x15
    17ac:	03 30       	cpi	r16, 0x03	; 3
    17ae:	11 05       	cpc	r17, r1
    17b0:	e1 f1       	breq	.+120    	; 0x182a <Timer_Start+0xd6>
    17b2:	2c 89       	ldd	r18, Y+20	; 0x14
    17b4:	3d 89       	ldd	r19, Y+21	; 0x15
    17b6:	24 30       	cpi	r18, 0x04	; 4
    17b8:	31 05       	cpc	r19, r1
    17ba:	5c f4       	brge	.+22     	; 0x17d2 <Timer_Start+0x7e>
    17bc:	8c 89       	ldd	r24, Y+20	; 0x14
    17be:	9d 89       	ldd	r25, Y+21	; 0x15
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	91 f0       	breq	.+36     	; 0x17ea <Timer_Start+0x96>
    17c6:	0c 89       	ldd	r16, Y+20	; 0x14
    17c8:	1d 89       	ldd	r17, Y+21	; 0x15
    17ca:	02 30       	cpi	r16, 0x02	; 2
    17cc:	11 05       	cpc	r17, r1
    17ce:	e9 f0       	breq	.+58     	; 0x180a <Timer_Start+0xb6>
    17d0:	5b c0       	rjmp	.+182    	; 0x1888 <Timer_Start+0x134>
    17d2:	2c 89       	ldd	r18, Y+20	; 0x14
    17d4:	3d 89       	ldd	r19, Y+21	; 0x15
    17d6:	24 30       	cpi	r18, 0x04	; 4
    17d8:	31 05       	cpc	r19, r1
    17da:	b9 f1       	breq	.+110    	; 0x184a <Timer_Start+0xf6>
    17dc:	8c 89       	ldd	r24, Y+20	; 0x14
    17de:	9d 89       	ldd	r25, Y+21	; 0x15
    17e0:	85 30       	cpi	r24, 0x05	; 5
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <Timer_Start+0x94>
    17e6:	41 c0       	rjmp	.+130    	; 0x186a <Timer_Start+0x116>
    17e8:	4f c0       	rjmp	.+158    	; 0x1888 <Timer_Start+0x134>
		{
		case PSC_0 :
		TCCR0 |= PSC_REG_0 ;
    17ea:	a3 e5       	ldi	r26, 0x53	; 83
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e3 e5       	ldi	r30, 0x53	; 83
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	81 60       	ori	r24, 0x01	; 1
    17f6:	8c 93       	st	X, r24
		tick_min = (1/F_CPU_Timer) ;
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e0       	ldi	r26, 0x00	; 0
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	89 87       	std	Y+9, r24	; 0x09
    1802:	9a 87       	std	Y+10, r25	; 0x0a
    1804:	ab 87       	std	Y+11, r26	; 0x0b
    1806:	bc 87       	std	Y+12, r27	; 0x0c
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <Timer_Start+0x134>
		break ;
		case PSC_8 :
		TCCR0 |= PSC_REG_8 ;
    180a:	a3 e5       	ldi	r26, 0x53	; 83
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e3 e5       	ldi	r30, 0x53	; 83
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	82 60       	ori	r24, 0x02	; 2
    1816:	8c 93       	st	X, r24
		tick_min = (8/F_CPU_Timer) ;
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e8       	ldi	r26, 0x80	; 128
    181e:	bf e3       	ldi	r27, 0x3F	; 63
    1820:	89 87       	std	Y+9, r24	; 0x09
    1822:	9a 87       	std	Y+10, r25	; 0x0a
    1824:	ab 87       	std	Y+11, r26	; 0x0b
    1826:	bc 87       	std	Y+12, r27	; 0x0c
    1828:	2f c0       	rjmp	.+94     	; 0x1888 <Timer_Start+0x134>
		break ;
		case PSC_64 :
		TCCR0 |= PSC_REG_64 ;
    182a:	a3 e5       	ldi	r26, 0x53	; 83
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e3 e5       	ldi	r30, 0x53	; 83
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	83 60       	ori	r24, 0x03	; 3
    1836:	8c 93       	st	X, r24
		tick_min = (64/F_CPU_Timer) ;
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b1 e4       	ldi	r27, 0x41	; 65
    1840:	89 87       	std	Y+9, r24	; 0x09
    1842:	9a 87       	std	Y+10, r25	; 0x0a
    1844:	ab 87       	std	Y+11, r26	; 0x0b
    1846:	bc 87       	std	Y+12, r27	; 0x0c
    1848:	1f c0       	rjmp	.+62     	; 0x1888 <Timer_Start+0x134>
		break ;
		case PSC_256 :
		TCCR0 |= PSC_REG_256 ;
    184a:	a3 e5       	ldi	r26, 0x53	; 83
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e3 e5       	ldi	r30, 0x53	; 83
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	84 60       	ori	r24, 0x04	; 4
    1856:	8c 93       	st	X, r24
		tick_min = (256/F_CPU_Timer) ;
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b2 e4       	ldi	r27, 0x42	; 66
    1860:	89 87       	std	Y+9, r24	; 0x09
    1862:	9a 87       	std	Y+10, r25	; 0x0a
    1864:	ab 87       	std	Y+11, r26	; 0x0b
    1866:	bc 87       	std	Y+12, r27	; 0x0c
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <Timer_Start+0x134>
		break ;
		case PSC_1024 :
		TCCR0 |= PSC_REG_1024 ;
    186a:	a3 e5       	ldi	r26, 0x53	; 83
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e3 e5       	ldi	r30, 0x53	; 83
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	85 60       	ori	r24, 0x05	; 5
    1876:	8c 93       	st	X, r24
		tick_min = (1024/F_CPU_Timer) ;
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e0       	ldi	r26, 0x00	; 0
    187e:	b3 e4       	ldi	r27, 0x43	; 67
    1880:	89 87       	std	Y+9, r24	; 0x09
    1882:	9a 87       	std	Y+10, r25	; 0x0a
    1884:	ab 87       	std	Y+11, r26	; 0x0b
    1886:	bc 87       	std	Y+12, r27	; 0x0c
		break ;
		}
		/*Calculating Total Number of Ticks*/
		Ticks = (Required_Time*1000)/tick_min ;
    1888:	8e 85       	ldd	r24, Y+14	; 0x0e
    188a:	9f 85       	ldd	r25, Y+15	; 0x0f
    188c:	a8 89       	ldd	r26, Y+16	; 0x10
    188e:	b9 89       	ldd	r27, Y+17	; 0x11
    1890:	28 ee       	ldi	r18, 0xE8	; 232
    1892:	33 e0       	ldi	r19, 0x03	; 3
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsi3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	29 85       	ldd	r18, Y+9	; 0x09
    18b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    18ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    18bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	80 93 9f 01 	sts	0x019F, r24
    18d4:	90 93 a0 01 	sts	0x01A0, r25
    18d8:	a0 93 a1 01 	sts	0x01A1, r26
    18dc:	b0 93 a2 01 	sts	0x01A2, r27
		Initial_ticks = Ticks ;
    18e0:	80 91 9f 01 	lds	r24, 0x019F
    18e4:	90 91 a0 01 	lds	r25, 0x01A0
    18e8:	a0 91 a1 01 	lds	r26, 0x01A1
    18ec:	b0 91 a2 01 	lds	r27, 0x01A2
    18f0:	80 93 86 01 	sts	0x0186, r24
    18f4:	90 93 87 01 	sts	0x0187, r25
    18f8:	a0 93 88 01 	sts	0x0188, r26
    18fc:	b0 93 89 01 	sts	0x0189, r27
		//Ticks = Required_Time ;
		/*counting the Number of Loops*/
		//uint32_t Loop = Ticks / Timer0_OVF ;
		uint32_t Loop = 1 ;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e0       	ldi	r26, 0x00	; 0
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	af 83       	std	Y+7, r26	; 0x07
    190e:	b8 87       	std	Y+8, r27	; 0x08
		for(i=0;i<(Loop+1);i++)
    1910:	10 92 a3 01 	sts	0x01A3, r1
    1914:	10 92 a4 01 	sts	0x01A4, r1
    1918:	10 92 a5 01 	sts	0x01A5, r1
    191c:	10 92 a6 01 	sts	0x01A6, r1
    1920:	71 c0       	rjmp	.+226    	; 0x1a04 <Timer_Start+0x2b0>
		{
		if(Ticks < Timer0_OVF_Val)
    1922:	80 91 9f 01 	lds	r24, 0x019F
    1926:	90 91 a0 01 	lds	r25, 0x01A0
    192a:	a0 91 a1 01 	lds	r26, 0x01A1
    192e:	b0 91 a2 01 	lds	r27, 0x01A2
    1932:	8f 3f       	cpi	r24, 0xFF	; 255
    1934:	91 05       	cpc	r25, r1
    1936:	a1 05       	cpc	r26, r1
    1938:	b1 05       	cpc	r27, r1
    193a:	68 f5       	brcc	.+90     	; 0x1996 <Timer_Start+0x242>
		{
			/*Initializing the Timer Register*/
			TCNT0 = Timer0_OVF_Val-Ticks;
    193c:	e2 e5       	ldi	r30, 0x52	; 82
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 91 9f 01 	lds	r24, 0x019F
    1944:	90 91 a0 01 	lds	r25, 0x01A0
    1948:	a0 91 a1 01 	lds	r26, 0x01A1
    194c:	b0 91 a2 01 	lds	r27, 0x01A2
    1950:	80 95       	com	r24
    1952:	80 83       	st	Z, r24
			Ticks = Ticks - Ticks ;
    1954:	20 91 9f 01 	lds	r18, 0x019F
    1958:	30 91 a0 01 	lds	r19, 0x01A0
    195c:	40 91 a1 01 	lds	r20, 0x01A1
    1960:	50 91 a2 01 	lds	r21, 0x01A2
    1964:	80 91 9f 01 	lds	r24, 0x019F
    1968:	90 91 a0 01 	lds	r25, 0x01A0
    196c:	a0 91 a1 01 	lds	r26, 0x01A1
    1970:	b0 91 a2 01 	lds	r27, 0x01A2
    1974:	79 01       	movw	r14, r18
    1976:	8a 01       	movw	r16, r20
    1978:	e8 1a       	sub	r14, r24
    197a:	f9 0a       	sbc	r15, r25
    197c:	0a 0b       	sbc	r16, r26
    197e:	1b 0b       	sbc	r17, r27
    1980:	d8 01       	movw	r26, r16
    1982:	c7 01       	movw	r24, r14
    1984:	80 93 9f 01 	sts	0x019F, r24
    1988:	90 93 a0 01 	sts	0x01A0, r25
    198c:	a0 93 a1 01 	sts	0x01A1, r26
    1990:	b0 93 a2 01 	sts	0x01A2, r27
    1994:	bf c1       	rjmp	.+894    	; 0x1d14 <Timer_Start+0x5c0>
			//while(GET_BIT(TIFR,TOV0_Reg)==0) ;
			/*Clearing the Overflow Bit*/
			//SET_BIT(TIFR,TOV0_Reg) ;
			break ;
		}
		else if(Ticks >= Timer0_OVF_Val)
    1996:	80 91 9f 01 	lds	r24, 0x019F
    199a:	90 91 a0 01 	lds	r25, 0x01A0
    199e:	a0 91 a1 01 	lds	r26, 0x01A1
    19a2:	b0 91 a2 01 	lds	r27, 0x01A2
    19a6:	8f 3f       	cpi	r24, 0xFF	; 255
    19a8:	91 05       	cpc	r25, r1
    19aa:	a1 05       	cpc	r26, r1
    19ac:	b1 05       	cpc	r27, r1
    19ae:	b8 f0       	brcs	.+46     	; 0x19de <Timer_Start+0x28a>
		{
			/*Initializing the Timer Register*/
			TCNT0 = 0x00 ;
    19b0:	e2 e5       	ldi	r30, 0x52	; 82
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	10 82       	st	Z, r1
			/*polling on the Overflow Register  */
			//while(GET_BIT(TIFR,TOV0_Reg) == 0) ;
			/*Clearing the Overflow Bit*/
			//SET_BIT(TIFR,TOV0_Reg) ;
			Ticks = Ticks - Timer0_OVF_Val ;
    19b6:	80 91 9f 01 	lds	r24, 0x019F
    19ba:	90 91 a0 01 	lds	r25, 0x01A0
    19be:	a0 91 a1 01 	lds	r26, 0x01A1
    19c2:	b0 91 a2 01 	lds	r27, 0x01A2
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	90 40       	sbci	r25, 0x00	; 0
    19ca:	a0 40       	sbci	r26, 0x00	; 0
    19cc:	b0 40       	sbci	r27, 0x00	; 0
    19ce:	80 93 9f 01 	sts	0x019F, r24
    19d2:	90 93 a0 01 	sts	0x01A0, r25
    19d6:	a0 93 a1 01 	sts	0x01A1, r26
    19da:	b0 93 a2 01 	sts	0x01A2, r27
		Initial_ticks = Ticks ;
		//Ticks = Required_Time ;
		/*counting the Number of Loops*/
		//uint32_t Loop = Ticks / Timer0_OVF ;
		uint32_t Loop = 1 ;
		for(i=0;i<(Loop+1);i++)
    19de:	80 91 a3 01 	lds	r24, 0x01A3
    19e2:	90 91 a4 01 	lds	r25, 0x01A4
    19e6:	a0 91 a5 01 	lds	r26, 0x01A5
    19ea:	b0 91 a6 01 	lds	r27, 0x01A6
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	a1 1d       	adc	r26, r1
    19f2:	b1 1d       	adc	r27, r1
    19f4:	80 93 a3 01 	sts	0x01A3, r24
    19f8:	90 93 a4 01 	sts	0x01A4, r25
    19fc:	a0 93 a5 01 	sts	0x01A5, r26
    1a00:	b0 93 a6 01 	sts	0x01A6, r27
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	af 81       	ldd	r26, Y+7	; 0x07
    1a0a:	b8 85       	ldd	r27, Y+8	; 0x08
    1a0c:	9c 01       	movw	r18, r24
    1a0e:	ad 01       	movw	r20, r26
    1a10:	2f 5f       	subi	r18, 0xFF	; 255
    1a12:	3f 4f       	sbci	r19, 0xFF	; 255
    1a14:	4f 4f       	sbci	r20, 0xFF	; 255
    1a16:	5f 4f       	sbci	r21, 0xFF	; 255
    1a18:	80 91 a3 01 	lds	r24, 0x01A3
    1a1c:	90 91 a4 01 	lds	r25, 0x01A4
    1a20:	a0 91 a5 01 	lds	r26, 0x01A5
    1a24:	b0 91 a6 01 	lds	r27, 0x01A6
    1a28:	82 17       	cp	r24, r18
    1a2a:	93 07       	cpc	r25, r19
    1a2c:	a4 07       	cpc	r26, r20
    1a2e:	b5 07       	cpc	r27, r21
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <Timer_Start+0x2e0>
    1a32:	77 cf       	rjmp	.-274    	; 0x1922 <Timer_Start+0x1ce>
    1a34:	6f c1       	rjmp	.+734    	; 0x1d14 <Timer_Start+0x5c0>
					break ;
				}
			}
			Timer_Stop_1() ;		
	}*/
	else if(Timer_Channel == 2)
    1a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <Timer_Start+0x2ea>
    1a3c:	6b c1       	rjmp	.+726    	; 0x1d14 <Timer_Start+0x5c0>
	{
		switch (Prescaller_Timer[Timer_Channel])
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	fc 01       	movw	r30, r24
    1a46:	ed 57       	subi	r30, 0x7D	; 125
    1a48:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4a:	80 81       	ld	r24, Z
    1a4c:	08 2f       	mov	r16, r24
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
    1a50:	1b 8b       	std	Y+19, r17	; 0x13
    1a52:	0a 8b       	std	Y+18, r16	; 0x12
    1a54:	2a 89       	ldd	r18, Y+18	; 0x12
    1a56:	3b 89       	ldd	r19, Y+19	; 0x13
    1a58:	23 30       	cpi	r18, 0x03	; 3
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	e1 f1       	breq	.+120    	; 0x1ad6 <Timer_Start+0x382>
    1a5e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a60:	9b 89       	ldd	r25, Y+19	; 0x13
    1a62:	84 30       	cpi	r24, 0x04	; 4
    1a64:	91 05       	cpc	r25, r1
    1a66:	5c f4       	brge	.+22     	; 0x1a7e <Timer_Start+0x32a>
    1a68:	0a 89       	ldd	r16, Y+18	; 0x12
    1a6a:	1b 89       	ldd	r17, Y+19	; 0x13
    1a6c:	01 30       	cpi	r16, 0x01	; 1
    1a6e:	11 05       	cpc	r17, r1
    1a70:	91 f0       	breq	.+36     	; 0x1a96 <Timer_Start+0x342>
    1a72:	2a 89       	ldd	r18, Y+18	; 0x12
    1a74:	3b 89       	ldd	r19, Y+19	; 0x13
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	e9 f0       	breq	.+58     	; 0x1ab6 <Timer_Start+0x362>
    1a7c:	5c c0       	rjmp	.+184    	; 0x1b36 <Timer_Start+0x3e2>
    1a7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a80:	9b 89       	ldd	r25, Y+19	; 0x13
    1a82:	84 30       	cpi	r24, 0x04	; 4
    1a84:	91 05       	cpc	r25, r1
    1a86:	b9 f1       	breq	.+110    	; 0x1af6 <Timer_Start+0x3a2>
    1a88:	0a 89       	ldd	r16, Y+18	; 0x12
    1a8a:	1b 89       	ldd	r17, Y+19	; 0x13
    1a8c:	05 30       	cpi	r16, 0x05	; 5
    1a8e:	11 05       	cpc	r17, r1
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <Timer_Start+0x340>
    1a92:	41 c0       	rjmp	.+130    	; 0x1b16 <Timer_Start+0x3c2>
    1a94:	50 c0       	rjmp	.+160    	; 0x1b36 <Timer_Start+0x3e2>
		{
			case PSC_0 :
			TCCR2 |= PSC_REG_0 ;
    1a96:	a5 e4       	ldi	r26, 0x45	; 69
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e5 e4       	ldi	r30, 0x45	; 69
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	81 60       	ori	r24, 0x01	; 1
    1aa2:	8c 93       	st	X, r24
			tick_min = (1/F_CPU_Timer) ;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	89 87       	std	Y+9, r24	; 0x09
    1aae:	9a 87       	std	Y+10, r25	; 0x0a
    1ab0:	ab 87       	std	Y+11, r26	; 0x0b
    1ab2:	bc 87       	std	Y+12, r27	; 0x0c
    1ab4:	48 c0       	rjmp	.+144    	; 0x1b46 <Timer_Start+0x3f2>
			break ;
			case PSC_8 :
			TCCR2 |= PSC_REG_8 ;
    1ab6:	a5 e4       	ldi	r26, 0x45	; 69
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e5 e4       	ldi	r30, 0x45	; 69
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	82 60       	ori	r24, 0x02	; 2
    1ac2:	8c 93       	st	X, r24
			tick_min = (8/F_CPU_Timer) ;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 e8       	ldi	r26, 0x80	; 128
    1aca:	bf e3       	ldi	r27, 0x3F	; 63
    1acc:	89 87       	std	Y+9, r24	; 0x09
    1ace:	9a 87       	std	Y+10, r25	; 0x0a
    1ad0:	ab 87       	std	Y+11, r26	; 0x0b
    1ad2:	bc 87       	std	Y+12, r27	; 0x0c
    1ad4:	38 c0       	rjmp	.+112    	; 0x1b46 <Timer_Start+0x3f2>
			break ;
			case PSC_64 :
			TCCR2 |= PSC_64 ;
    1ad6:	a5 e4       	ldi	r26, 0x45	; 69
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e4       	ldi	r30, 0x45	; 69
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	83 60       	ori	r24, 0x03	; 3
    1ae2:	8c 93       	st	X, r24
			tick_min = (64/F_CPU_Timer) ;
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b1 e4       	ldi	r27, 0x41	; 65
    1aec:	89 87       	std	Y+9, r24	; 0x09
    1aee:	9a 87       	std	Y+10, r25	; 0x0a
    1af0:	ab 87       	std	Y+11, r26	; 0x0b
    1af2:	bc 87       	std	Y+12, r27	; 0x0c
    1af4:	28 c0       	rjmp	.+80     	; 0x1b46 <Timer_Start+0x3f2>
			break ;
			case PSC_256 :
			TCCR2 |= PSC_REG_256 ;
    1af6:	a5 e4       	ldi	r26, 0x45	; 69
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e4       	ldi	r30, 0x45	; 69
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	84 60       	ori	r24, 0x04	; 4
    1b02:	8c 93       	st	X, r24
			tick_min = (256/F_CPU_Timer) ;
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a0 e0       	ldi	r26, 0x00	; 0
    1b0a:	b2 e4       	ldi	r27, 0x42	; 66
    1b0c:	89 87       	std	Y+9, r24	; 0x09
    1b0e:	9a 87       	std	Y+10, r25	; 0x0a
    1b10:	ab 87       	std	Y+11, r26	; 0x0b
    1b12:	bc 87       	std	Y+12, r27	; 0x0c
    1b14:	18 c0       	rjmp	.+48     	; 0x1b46 <Timer_Start+0x3f2>
			break ;
			case PSC_1024 :
			TCCR2 |= PSC_REG_1024 ;
    1b16:	a5 e4       	ldi	r26, 0x45	; 69
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e5 e4       	ldi	r30, 0x45	; 69
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	85 60       	ori	r24, 0x05	; 5
    1b22:	8c 93       	st	X, r24
			tick_min = (1024/F_CPU_Timer) ;
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b3 e4       	ldi	r27, 0x43	; 67
    1b2c:	89 87       	std	Y+9, r24	; 0x09
    1b2e:	9a 87       	std	Y+10, r25	; 0x0a
    1b30:	ab 87       	std	Y+11, r26	; 0x0b
    1b32:	bc 87       	std	Y+12, r27	; 0x0c
    1b34:	08 c0       	rjmp	.+16     	; 0x1b46 <Timer_Start+0x3f2>
			break ;
			default:
			tick_min = (1024/F_CPU_Timer) ;
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b3 e4       	ldi	r27, 0x43	; 67
    1b3e:	89 87       	std	Y+9, r24	; 0x09
    1b40:	9a 87       	std	Y+10, r25	; 0x0a
    1b42:	ab 87       	std	Y+11, r26	; 0x0b
    1b44:	bc 87       	std	Y+12, r27	; 0x0c
			break;
		}
		/*Calculating Total Number of Ticks*/
		Ticks = (Required_Time*1000) / 	tick_min ;
    1b46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b48:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b4a:	a8 89       	ldd	r26, Y+16	; 0x10
    1b4c:	b9 89       	ldd	r27, Y+17	; 0x11
    1b4e:	28 ee       	ldi	r18, 0xE8	; 232
    1b50:	33 e0       	ldi	r19, 0x03	; 3
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsi3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	29 85       	ldd	r18, Y+9	; 0x09
    1b74:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b76:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b78:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	80 93 9f 01 	sts	0x019F, r24
    1b92:	90 93 a0 01 	sts	0x01A0, r25
    1b96:	a0 93 a1 01 	sts	0x01A1, r26
    1b9a:	b0 93 a2 01 	sts	0x01A2, r27
		uint32_t Loop = Ticks / Timer2_OVF ;
    1b9e:	80 91 9f 01 	lds	r24, 0x019F
    1ba2:	90 91 a0 01 	lds	r25, 0x01A0
    1ba6:	a0 91 a1 01 	lds	r26, 0x01A1
    1baa:	b0 91 a2 01 	lds	r27, 0x01A2
    1bae:	2f ef       	ldi	r18, 0xFF	; 255
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 41 12 	call	0x2482	; 0x2482 <__udivmodsi4>
    1bbe:	da 01       	movw	r26, r20
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	ab 83       	std	Y+3, r26	; 0x03
    1bc8:	bc 83       	std	Y+4, r27	; 0x04
			for(i=0;i<Loop+1;i++)
    1bca:	10 92 a3 01 	sts	0x01A3, r1
    1bce:	10 92 a4 01 	sts	0x01A4, r1
    1bd2:	10 92 a5 01 	sts	0x01A5, r1
    1bd6:	10 92 a6 01 	sts	0x01A6, r1
    1bda:	82 c0       	rjmp	.+260    	; 0x1ce0 <Timer_Start+0x58c>
			{
				if(Ticks < Timer2_OVF)
    1bdc:	80 91 9f 01 	lds	r24, 0x019F
    1be0:	90 91 a0 01 	lds	r25, 0x01A0
    1be4:	a0 91 a1 01 	lds	r26, 0x01A1
    1be8:	b0 91 a2 01 	lds	r27, 0x01A2
    1bec:	8f 3f       	cpi	r24, 0xFF	; 255
    1bee:	91 05       	cpc	r25, r1
    1bf0:	a1 05       	cpc	r26, r1
    1bf2:	b1 05       	cpc	r27, r1
    1bf4:	28 f5       	brcc	.+74     	; 0x1c40 <Timer_Start+0x4ec>
				{
					/*Timer2 Counter*/
					TCNT2 = Timer2_OVF-Ticks ;
    1bf6:	e4 e4       	ldi	r30, 0x44	; 68
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 91 9f 01 	lds	r24, 0x019F
    1bfe:	90 91 a0 01 	lds	r25, 0x01A0
    1c02:	a0 91 a1 01 	lds	r26, 0x01A1
    1c06:	b0 91 a2 01 	lds	r27, 0x01A2
    1c0a:	80 95       	com	r24
    1c0c:	80 83       	st	Z, r24
					/*Polling the Overflow Flag*/
					while(GET_BIT(TIFR,TOV2) == 0) ;
    1c0e:	e8 e5       	ldi	r30, 0x58	; 88
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	80 74       	andi	r24, 0x40	; 64
    1c1a:	90 70       	andi	r25, 0x00	; 0
    1c1c:	08 2e       	mov	r0, r24
    1c1e:	89 2f       	mov	r24, r25
    1c20:	00 0c       	add	r0, r0
    1c22:	88 1f       	adc	r24, r24
    1c24:	99 0b       	sbc	r25, r25
    1c26:	00 0c       	add	r0, r0
    1c28:	88 1f       	adc	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	79 f3       	breq	.-34     	; 0x1c0e <Timer_Start+0x4ba>
					/*Clearing */
					SET_BIT(TIFR,TOV0) ;
    1c30:	a8 e5       	ldi	r26, 0x58	; 88
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e8 e5       	ldi	r30, 0x58	; 88
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	81 60       	ori	r24, 0x01	; 1
    1c3c:	8c 93       	st	X, r24
    1c3e:	68 c0       	rjmp	.+208    	; 0x1d10 <Timer_Start+0x5bc>
					break ;			
				}
				else if(Ticks >= Timer2_OVF)
    1c40:	80 91 9f 01 	lds	r24, 0x019F
    1c44:	90 91 a0 01 	lds	r25, 0x01A0
    1c48:	a0 91 a1 01 	lds	r26, 0x01A1
    1c4c:	b0 91 a2 01 	lds	r27, 0x01A2
    1c50:	8f 3f       	cpi	r24, 0xFF	; 255
    1c52:	91 05       	cpc	r25, r1
    1c54:	a1 05       	cpc	r26, r1
    1c56:	b1 05       	cpc	r27, r1
    1c58:	08 f4       	brcc	.+2      	; 0x1c5c <Timer_Start+0x508>
    1c5a:	5a c0       	rjmp	.+180    	; 0x1d10 <Timer_Start+0x5bc>
				{
					TCNT2 = 0x00 ;
    1c5c:	e4 e4       	ldi	r30, 0x44	; 68
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	10 82       	st	Z, r1
					while(GET_BIT(TIFR,TOV2)==0) ;
    1c62:	e8 e5       	ldi	r30, 0x58	; 88
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	80 74       	andi	r24, 0x40	; 64
    1c6e:	90 70       	andi	r25, 0x00	; 0
    1c70:	08 2e       	mov	r0, r24
    1c72:	89 2f       	mov	r24, r25
    1c74:	00 0c       	add	r0, r0
    1c76:	88 1f       	adc	r24, r24
    1c78:	99 0b       	sbc	r25, r25
    1c7a:	00 0c       	add	r0, r0
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	79 f3       	breq	.-34     	; 0x1c62 <Timer_Start+0x50e>
					SET_BIT(TIFR,TOV0) ;
    1c84:	a8 e5       	ldi	r26, 0x58	; 88
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e8 e5       	ldi	r30, 0x58	; 88
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	81 60       	ori	r24, 0x01	; 1
    1c90:	8c 93       	st	X, r24
					Ticks = Ticks - Timer2_OVF ;
    1c92:	80 91 9f 01 	lds	r24, 0x019F
    1c96:	90 91 a0 01 	lds	r25, 0x01A0
    1c9a:	a0 91 a1 01 	lds	r26, 0x01A1
    1c9e:	b0 91 a2 01 	lds	r27, 0x01A2
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	90 40       	sbci	r25, 0x00	; 0
    1ca6:	a0 40       	sbci	r26, 0x00	; 0
    1ca8:	b0 40       	sbci	r27, 0x00	; 0
    1caa:	80 93 9f 01 	sts	0x019F, r24
    1cae:	90 93 a0 01 	sts	0x01A0, r25
    1cb2:	a0 93 a1 01 	sts	0x01A1, r26
    1cb6:	b0 93 a2 01 	sts	0x01A2, r27
			break;
		}
		/*Calculating Total Number of Ticks*/
		Ticks = (Required_Time*1000) / 	tick_min ;
		uint32_t Loop = Ticks / Timer2_OVF ;
			for(i=0;i<Loop+1;i++)
    1cba:	80 91 a3 01 	lds	r24, 0x01A3
    1cbe:	90 91 a4 01 	lds	r25, 0x01A4
    1cc2:	a0 91 a5 01 	lds	r26, 0x01A5
    1cc6:	b0 91 a6 01 	lds	r27, 0x01A6
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	b1 1d       	adc	r27, r1
    1cd0:	80 93 a3 01 	sts	0x01A3, r24
    1cd4:	90 93 a4 01 	sts	0x01A4, r25
    1cd8:	a0 93 a5 01 	sts	0x01A5, r26
    1cdc:	b0 93 a6 01 	sts	0x01A6, r27
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ce6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ce8:	9c 01       	movw	r18, r24
    1cea:	ad 01       	movw	r20, r26
    1cec:	2f 5f       	subi	r18, 0xFF	; 255
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	4f 4f       	sbci	r20, 0xFF	; 255
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf4:	80 91 a3 01 	lds	r24, 0x01A3
    1cf8:	90 91 a4 01 	lds	r25, 0x01A4
    1cfc:	a0 91 a5 01 	lds	r26, 0x01A5
    1d00:	b0 91 a6 01 	lds	r27, 0x01A6
    1d04:	82 17       	cp	r24, r18
    1d06:	93 07       	cpc	r25, r19
    1d08:	a4 07       	cpc	r26, r20
    1d0a:	b5 07       	cpc	r27, r21
    1d0c:	08 f4       	brcc	.+2      	; 0x1d10 <Timer_Start+0x5bc>
    1d0e:	66 cf       	rjmp	.-308    	; 0x1bdc <Timer_Start+0x488>
				else
				{
					break ;
				}
		}
		Timer_Stop_2() ;
    1d10:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Timer_Stop_2>
	}
	return ERROR_OK ;
    1d14:	80 e0       	ldi	r24, 0x00	; 0
}
    1d16:	65 96       	adiw	r28, 0x15	; 21
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	ff 90       	pop	r15
    1d2c:	ef 90       	pop	r14
    1d2e:	08 95       	ret

00001d30 <Timer_Stop>:
/**************************************************************************************************************************************/
/*Creating Timer Stop Function */
/**************************************************************************************************************************************/

uint8_t Timer_Stop(uint8_t Timer_Channel)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <Timer_Stop+0x6>
    1d36:	0f 92       	push	r0
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	switch(Timer_Channel)
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	3b 83       	std	Y+3, r19	; 0x03
    1d46:	2a 83       	std	Y+2, r18	; 0x02
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	59 f0       	breq	.+22     	; 0x1d68 <Timer_Stop+0x38>
    1d52:	2a 81       	ldd	r18, Y+2	; 0x02
    1d54:	3b 81       	ldd	r19, Y+3	; 0x03
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	41 f0       	breq	.+16     	; 0x1d6c <Timer_Stop+0x3c>
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	31 f4       	brne	.+12     	; 0x1d70 <Timer_Stop+0x40>
	{
	case 0 :
	Timer_Stop_0() ;
    1d64:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <Timer_Stop_0>
	case 1 : 
	Timer_Stop_1() ;
    1d68:	0e 94 ef 0a 	call	0x15de	; 0x15de <Timer_Stop_1>
	case 2 :
	Timer_Stop_2() ;
    1d6c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Timer_Stop_2>
	}
	return ERROR_OK ;
    1d70:	80 e0       	ldi	r24, 0x00	; 0
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <DIO_Init_Port>:
 * @param: Port_no, Port number sent by the user
 * @param: val, value to assign to port
 * Description: Function to initialize Port Direction and return status
 **************************************************************************/
uint8_t DIO_Init_Port(uint8_t Port_no , uint8_t val)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <DIO_Init_Port+0x6>
    1d84:	0f 92       	push	r0
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	6a 83       	std	Y+2, r22	; 0x02
	if (Port_no< number_of_ports)
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	78 f4       	brcc	.+30     	; 0x1db2 <DIO_Init_Port+0x34>
	{
		*gapu8_DDR[Port_no]=val;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	fc 01       	movw	r30, r24
    1da0:	e0 59       	subi	r30, 0x90	; 144
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	01 90       	ld	r0, Z+
    1da6:	f0 81       	ld	r31, Z
    1da8:	e0 2d       	mov	r30, r0
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	80 83       	st	Z, r24
		return ERROR_OK;
    1dae:	1b 82       	std	Y+3, r1	; 0x03
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <DIO_Init_Port+0x38>
	}
	else
	{
		return ERROR_NOK;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	8b 83       	std	Y+3, r24	; 0x03
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <DIO_Init_Pin>:
 * @param: val, value to assign to pin
 * Description: Function to initialize Pin Direction and return status
 **************************************************************************/

uint8_t DIO_Init_Pin(uint8_t Pin_no, uint8_t val)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <DIO_Init_Pin+0x6>
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <DIO_Init_Pin+0x8>
    1dcc:	0f 92       	push	r0
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
    1dd4:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port ,pin ;
	if (Pin_no < number_of_all_pins)
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	80 32       	cpi	r24, 0x20	; 32
    1dda:	08 f0       	brcs	.+2      	; 0x1dde <DIO_Init_Pin+0x1a>
    1ddc:	5e c0       	rjmp	.+188    	; 0x1e9a <DIO_Init_Pin+0xd6>
	{
		port = Pin_no / number_of_pins;
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	86 95       	lsr	r24
    1de2:	86 95       	lsr	r24
    1de4:	86 95       	lsr	r24
    1de6:	8a 83       	std	Y+2, r24	; 0x02
		pin = Pin_no % number_of_pins;
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	87 70       	andi	r24, 0x07	; 7
    1dec:	89 83       	std	Y+1, r24	; 0x01
		if (val == HIGH)
    1dee:	8c 81       	ldd	r24, Y+4	; 0x04
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	31 f5       	brne	.+76     	; 0x1e40 <DIO_Init_Pin+0x7c>
		{
			SET_BIT(*gapu8_DDR[port],pin);
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	fc 01       	movw	r30, r24
    1e00:	e0 59       	subi	r30, 0x90	; 144
    1e02:	fe 4f       	sbci	r31, 0xFE	; 254
    1e04:	a0 81       	ld	r26, Z
    1e06:	b1 81       	ldd	r27, Z+1	; 0x01
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	fc 01       	movw	r30, r24
    1e14:	e0 59       	subi	r30, 0x90	; 144
    1e16:	fe 4f       	sbci	r31, 0xFE	; 254
    1e18:	01 90       	ld	r0, Z+
    1e1a:	f0 81       	ld	r31, Z
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	02 2e       	mov	r0, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <DIO_Init_Pin+0x70>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <DIO_Init_Pin+0x6c>
    1e38:	84 2b       	or	r24, r20
    1e3a:	8c 93       	st	X, r24
			return ERROR_OK;
    1e3c:	1d 82       	std	Y+5, r1	; 0x05
    1e3e:	2f c0       	rjmp	.+94     	; 0x1e9e <DIO_Init_Pin+0xda>
		}
		else if (val == LOW)
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	88 23       	and	r24, r24
    1e44:	39 f5       	brne	.+78     	; 0x1e94 <DIO_Init_Pin+0xd0>
		{
			CLEAR_BIT(*gapu8_DDR[port],pin);
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	fc 01       	movw	r30, r24
    1e52:	e0 59       	subi	r30, 0x90	; 144
    1e54:	fe 4f       	sbci	r31, 0xFE	; 254
    1e56:	a0 81       	ld	r26, Z
    1e58:	b1 81       	ldd	r27, Z+1	; 0x01
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	fc 01       	movw	r30, r24
    1e66:	e0 59       	subi	r30, 0x90	; 144
    1e68:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6a:	01 90       	ld	r0, Z+
    1e6c:	f0 81       	ld	r31, Z
    1e6e:	e0 2d       	mov	r30, r0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <DIO_Init_Pin+0xc2>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <DIO_Init_Pin+0xbe>
    1e8a:	80 95       	com	r24
    1e8c:	84 23       	and	r24, r20
    1e8e:	8c 93       	st	X, r24

			return ERROR_OK;
    1e90:	1d 82       	std	Y+5, r1	; 0x05
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <DIO_Init_Pin+0xda>
		}
		else
		{
			return ERROR_NOK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_Init_Pin+0xda>
		}
	}
	else
	{
		return ERROR_NOK;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <DIO_Port_Read>:
 * @param: *val, value to read from port
 * Description: Function to return Port value and return status
 **************************************************************************/

uint8_t DIO_Port_Read (uint8_t Port_no, uint8_t *val)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <DIO_Port_Read+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <DIO_Port_Read+0x8>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	7b 83       	std	Y+3, r23	; 0x03
    1ec0:	6a 83       	std	Y+2, r22	; 0x02
	if (Port_no < number_of_ports)
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	84 30       	cpi	r24, 0x04	; 4
    1ec6:	88 f4       	brcc	.+34     	; 0x1eea <DIO_Port_Read+0x3a>
	{
		*val = *gapu8_PIN[Port_no];
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	e8 58       	subi	r30, 0x88	; 136
    1ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed8:	01 90       	ld	r0, Z+
    1eda:	f0 81       	ld	r31, Z
    1edc:	e0 2d       	mov	r30, r0
    1ede:	80 81       	ld	r24, Z
    1ee0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee4:	80 83       	st	Z, r24
		return ERROR_OK;
    1ee6:	1c 82       	std	Y+4, r1	; 0x04
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_Port_Read+0x3e>
	}
	else
	{
		return ERROR_NOK;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	8c 83       	std	Y+4, r24	; 0x04
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <DIO_Pin_Read>:
 * @param: *val, value to read from pin
 * Description: Function to return Pin value and return status
 **************************************************************************/

uint8_t DIO_Pin_Read (uint8_t Pin_no, uint8_t *val)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <DIO_Pin_Read+0x6>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <DIO_Pin_Read+0x8>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <DIO_Pin_Read+0xa>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
    1f0e:	7d 83       	std	Y+5, r23	; 0x05
    1f10:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port , pin ;
	if (Pin_no < number_of_all_pins)
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	80 32       	cpi	r24, 0x20	; 32
    1f16:	90 f5       	brcc	.+100    	; 0x1f7c <DIO_Pin_Read+0x7e>
	{
		port = Pin_no / number_of_pins;
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	86 95       	lsr	r24
    1f1c:	86 95       	lsr	r24
    1f1e:	86 95       	lsr	r24
    1f20:	8a 83       	std	Y+2, r24	; 0x02
		pin = Pin_no % number_of_pins;
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	87 70       	andi	r24, 0x07	; 7
    1f26:	89 83       	std	Y+1, r24	; 0x01
		*val = GET_BIT(*gapu8_PIN[port],pin);
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	fc 01       	movw	r30, r24
    1f34:	e8 58       	subi	r30, 0x88	; 136
    1f36:	fe 4f       	sbci	r31, 0xFE	; 254
    1f38:	01 90       	ld	r0, Z+
    1f3a:	f0 81       	ld	r31, Z
    1f3c:	e0 2d       	mov	r30, r0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <DIO_Pin_Read+0x56>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	2a 95       	dec	r18
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <DIO_Pin_Read+0x52>
    1f58:	9a 01       	movw	r18, r20
    1f5a:	28 23       	and	r18, r24
    1f5c:	39 23       	and	r19, r25
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a9 01       	movw	r20, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <DIO_Pin_Read+0x6e>
    1f68:	55 95       	asr	r21
    1f6a:	47 95       	ror	r20
    1f6c:	8a 95       	dec	r24
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <DIO_Pin_Read+0x6a>
    1f70:	ca 01       	movw	r24, r20
    1f72:	ec 81       	ldd	r30, Y+4	; 0x04
    1f74:	fd 81       	ldd	r31, Y+5	; 0x05
    1f76:	80 83       	st	Z, r24
		return ERROR_OK;
    1f78:	1e 82       	std	Y+6, r1	; 0x06
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <DIO_Pin_Read+0x82>
	}
	else
	{
		return ERROR_NOK;
    1f7c:	51 e0       	ldi	r21, 0x01	; 1
    1f7e:	5e 83       	std	Y+6, r21	; 0x06
    1f80:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    1f82:	26 96       	adiw	r28, 0x06	; 6
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <DIO_Port_Write>:
 * @param: val, value to write to port
 * Description: Function to write Port value and return status
 **************************************************************************/

uint8_t DIO_Port_Write(uint8_t Port_no,uint8_t val)
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <DIO_Port_Write+0x6>
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	6a 83       	std	Y+2, r22	; 0x02
	if (Port_no < number_of_ports)
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	84 30       	cpi	r24, 0x04	; 4
    1fa8:	78 f4       	brcc	.+30     	; 0x1fc8 <DIO_Port_Write+0x34>
	{
		*gapu8_PORT[Port_no]=val;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	e8 59       	subi	r30, 0x98	; 152
    1fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fba:	01 90       	ld	r0, Z+
    1fbc:	f0 81       	ld	r31, Z
    1fbe:	e0 2d       	mov	r30, r0
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	80 83       	st	Z, r24
		return ERROR_OK;
    1fc4:	1b 82       	std	Y+3, r1	; 0x03
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <DIO_Port_Write+0x38>
	}
	else
	{
		return ERROR_NOK;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	8b 83       	std	Y+3, r24	; 0x03
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <DIO_Pin_Write>:
 * @param: val, value to write to pin
 * Description: Function to write Pin value and return status
 **************************************************************************/

uint8_t DIO_Pin_Write(uint8_t Pin_no,uint8_t val)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <DIO_Pin_Write+0x6>
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <DIO_Pin_Write+0x8>
    1fe2:	0f 92       	push	r0
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
    1fea:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port,pin;
	if(Pin_no < number_of_all_pins)
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	80 32       	cpi	r24, 0x20	; 32
    1ff0:	08 f0       	brcs	.+2      	; 0x1ff4 <DIO_Pin_Write+0x1a>
    1ff2:	5e c0       	rjmp	.+188    	; 0x20b0 <DIO_Pin_Write+0xd6>
	{
		port = Pin_no / number_of_pins;
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	86 95       	lsr	r24
    1ff8:	86 95       	lsr	r24
    1ffa:	86 95       	lsr	r24
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
		pin = Pin_no % number_of_pins;
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	87 70       	andi	r24, 0x07	; 7
    2002:	89 83       	std	Y+1, r24	; 0x01
		if (val == HIGH)
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	31 f5       	brne	.+76     	; 0x2056 <DIO_Pin_Write+0x7c>
		{
			SET_BIT(*gapu8_PORT[port],pin);
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	fc 01       	movw	r30, r24
    2016:	e8 59       	subi	r30, 0x98	; 152
    2018:	fe 4f       	sbci	r31, 0xFE	; 254
    201a:	a0 81       	ld	r26, Z
    201c:	b1 81       	ldd	r27, Z+1	; 0x01
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	fc 01       	movw	r30, r24
    202a:	e8 59       	subi	r30, 0x98	; 152
    202c:	fe 4f       	sbci	r31, 0xFE	; 254
    202e:	01 90       	ld	r0, Z+
    2030:	f0 81       	ld	r31, Z
    2032:	e0 2d       	mov	r30, r0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <DIO_Pin_Write+0x70>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <DIO_Pin_Write+0x6c>
    204e:	84 2b       	or	r24, r20
    2050:	8c 93       	st	X, r24
			return ERROR_OK;
    2052:	1d 82       	std	Y+5, r1	; 0x05
    2054:	2f c0       	rjmp	.+94     	; 0x20b4 <DIO_Pin_Write+0xda>
		}
		else if (val == LOW)
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	88 23       	and	r24, r24
    205a:	39 f5       	brne	.+78     	; 0x20aa <DIO_Pin_Write+0xd0>
		{
			CLEAR_BIT(*gapu8_PORT[port],pin);
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	fc 01       	movw	r30, r24
    2068:	e8 59       	subi	r30, 0x98	; 152
    206a:	fe 4f       	sbci	r31, 0xFE	; 254
    206c:	a0 81       	ld	r26, Z
    206e:	b1 81       	ldd	r27, Z+1	; 0x01
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	fc 01       	movw	r30, r24
    207c:	e8 59       	subi	r30, 0x98	; 152
    207e:	fe 4f       	sbci	r31, 0xFE	; 254
    2080:	01 90       	ld	r0, Z+
    2082:	f0 81       	ld	r31, Z
    2084:	e0 2d       	mov	r30, r0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <DIO_Pin_Write+0xc2>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <DIO_Pin_Write+0xbe>
    20a0:	80 95       	com	r24
    20a2:	84 23       	and	r24, r20
    20a4:	8c 93       	st	X, r24
			return ERROR_OK;
    20a6:	1d 82       	std	Y+5, r1	; 0x05
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <DIO_Pin_Write+0xda>
		}
		else
		{
			return ERROR_NOK;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <DIO_Pin_Write+0xda>
		}
	}
	else
	{
		return ERROR_NOK;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <DIO_Activate_Pullup>:
 * @param: Pin_no, Pin number sent by the user
 * Description: Function to enable the internal Pull-up resistor of a Pin
 **************************************************************************/

uint8_t DIO_Activate_Pullup(uint8_t Pin_no)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <DIO_Activate_Pullup+0x6>
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <DIO_Activate_Pullup+0x8>
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t port ,pin ;
	if (Pin_no < number_of_all_pins)
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	80 32       	cpi	r24, 0x20	; 32
    20d8:	70 f5       	brcc	.+92     	; 0x2136 <DIO_Activate_Pullup+0x70>
	{
		port = Pin_no / number_of_pins;
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	86 95       	lsr	r24
    20de:	86 95       	lsr	r24
    20e0:	86 95       	lsr	r24
    20e2:	8a 83       	std	Y+2, r24	; 0x02
		pin = Pin_no % number_of_pins;
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	87 70       	andi	r24, 0x07	; 7
    20e8:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(*gapu8_PORT[port],pin);
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	fc 01       	movw	r30, r24
    20f6:	e8 59       	subi	r30, 0x98	; 152
    20f8:	fe 4f       	sbci	r31, 0xFE	; 254
    20fa:	a0 81       	ld	r26, Z
    20fc:	b1 81       	ldd	r27, Z+1	; 0x01
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	fc 01       	movw	r30, r24
    210a:	e8 59       	subi	r30, 0x98	; 152
    210c:	fe 4f       	sbci	r31, 0xFE	; 254
    210e:	01 90       	ld	r0, Z+
    2110:	f0 81       	ld	r31, Z
    2112:	e0 2d       	mov	r30, r0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <DIO_Activate_Pullup+0x64>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <DIO_Activate_Pullup+0x60>
    212e:	84 2b       	or	r24, r20
    2130:	8c 93       	st	X, r24
		return ERROR_OK;
    2132:	1c 82       	std	Y+4, r1	; 0x04
    2134:	02 c0       	rjmp	.+4      	; 0x213a <DIO_Activate_Pullup+0x74>
	}
	else
	{
		return ERROR_NOK;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	8c 83       	std	Y+4, r24	; 0x04
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <__vector_1>:
volatile uint8_t Velocity = 0 ;
static uint8_t Velocity1 = 0 ;
volatile uint8_t Velocity2 = 0 ;

void __vector_1 (void)
{
    214a:	1f 92       	push	r1
    214c:	0f 92       	push	r0
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	0f 92       	push	r0
    2152:	11 24       	eor	r1, r1
    2154:	2f 93       	push	r18
    2156:	3f 93       	push	r19
    2158:	4f 93       	push	r20
    215a:	5f 93       	push	r21
    215c:	6f 93       	push	r22
    215e:	7f 93       	push	r23
    2160:	8f 93       	push	r24
    2162:	9f 93       	push	r25
    2164:	af 93       	push	r26
    2166:	bf 93       	push	r27
    2168:	ef 93       	push	r30
    216a:	ff 93       	push	r31
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62

	if(flag2 == 0)
    2174:	80 91 8e 01 	lds	r24, 0x018E
    2178:	88 23       	and	r24, r24
    217a:	31 f4       	brne	.+12     	; 0x2188 <__vector_1+0x3e>
	{
	flag2++;
    217c:	80 91 8e 01 	lds	r24, 0x018E
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	80 93 8e 01 	sts	0x018E, r24
    2186:	5e c0       	rjmp	.+188    	; 0x2244 <__vector_1+0xfa>
	}else
	{
		Distance = Distance + (Velocity2*Delta_t*Ignite_Flag_Var)/1000 ;
    2188:	80 91 91 01 	lds	r24, 0x0191
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	8a ef       	ldi	r24, 0xFA	; 250
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	ac 01       	movw	r20, r24
    2196:	24 9f       	mul	r18, r20
    2198:	c0 01       	movw	r24, r0
    219a:	25 9f       	mul	r18, r21
    219c:	90 0d       	add	r25, r0
    219e:	34 9f       	mul	r19, r20
    21a0:	90 0d       	add	r25, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	aa 27       	eor	r26, r26
    21a6:	97 fd       	sbrc	r25, 7
    21a8:	a0 95       	com	r26
    21aa:	ba 2f       	mov	r27, r26
    21ac:	20 91 97 01 	lds	r18, 0x0197
    21b0:	30 91 98 01 	lds	r19, 0x0198
    21b4:	40 91 99 01 	lds	r20, 0x0199
    21b8:	50 91 9a 01 	lds	r21, 0x019A
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsi3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	28 ee       	ldi	r18, 0xE8	; 232
    21ca:	33 e0       	ldi	r19, 0x03	; 3
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	bc 01       	movw	r22, r24
    21d2:	cd 01       	movw	r24, r26
    21d4:	0e 94 41 12 	call	0x2482	; 0x2482 <__udivmodsi4>
    21d8:	da 01       	movw	r26, r20
    21da:	c9 01       	movw	r24, r18
    21dc:	9c 01       	movw	r18, r24
    21de:	ad 01       	movw	r20, r26
    21e0:	80 91 a7 01 	lds	r24, 0x01A7
    21e4:	90 91 a8 01 	lds	r25, 0x01A8
    21e8:	a0 91 a9 01 	lds	r26, 0x01A9
    21ec:	b0 91 aa 01 	lds	r27, 0x01AA
    21f0:	82 0f       	add	r24, r18
    21f2:	93 1f       	adc	r25, r19
    21f4:	a4 1f       	adc	r26, r20
    21f6:	b5 1f       	adc	r27, r21
    21f8:	80 93 a7 01 	sts	0x01A7, r24
    21fc:	90 93 a8 01 	sts	0x01A8, r25
    2200:	a0 93 a9 01 	sts	0x01A9, r26
    2204:	b0 93 aa 01 	sts	0x01AA, r27
		PORTC = Ignite_Flag_Var ;
    2208:	e5 e3       	ldi	r30, 0x35	; 53
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 91 97 01 	lds	r24, 0x0197
    2210:	90 91 98 01 	lds	r25, 0x0198
    2214:	a0 91 99 01 	lds	r26, 0x0199
    2218:	b0 91 9a 01 	lds	r27, 0x019A
    221c:	80 83       	st	Z, r24
		UART_sendByte((char)Distance) ;
    221e:	80 91 a7 01 	lds	r24, 0x01A7
    2222:	90 91 a8 01 	lds	r25, 0x01A8
    2226:	a0 91 a9 01 	lds	r26, 0x01A9
    222a:	b0 91 aa 01 	lds	r27, 0x01AA
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <UART_sendByte>
		Velocity1 = 0 ;
    2236:	10 92 90 01 	sts	0x0190, r1
		Velocity2 = 0 ;
    223a:	10 92 91 01 	sts	0x0191, r1
		TCNT0=0;
    223e:	e2 e5       	ldi	r30, 0x52	; 82
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	10 82       	st	Z, r1
		//Distance = 0 ;
	}
}
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	ff 91       	pop	r31
    224a:	ef 91       	pop	r30
    224c:	bf 91       	pop	r27
    224e:	af 91       	pop	r26
    2250:	9f 91       	pop	r25
    2252:	8f 91       	pop	r24
    2254:	7f 91       	pop	r23
    2256:	6f 91       	pop	r22
    2258:	5f 91       	pop	r21
    225a:	4f 91       	pop	r20
    225c:	3f 91       	pop	r19
    225e:	2f 91       	pop	r18
    2260:	0f 90       	pop	r0
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	0f 90       	pop	r0
    2266:	1f 90       	pop	r1
    2268:	18 95       	reti

0000226a <main>:


int main()
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xFF ;
    2272:	e4 e3       	ldi	r30, 0x34	; 52
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	80 83       	st	Z, r24
	DIO_Init_Pin(PC4,HIGH);
    227a:	84 e0       	ldi	r24, 0x04	; 4
    227c:	61 e0       	ldi	r22, 0x01	; 1
    227e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
	system_init() ;
    2282:	0e 94 b0 11 	call	0x2360	; 0x2360 <system_init>
	while (1)
	{

		if(Velocity1 == 0)
    2286:	80 91 90 01 	lds	r24, 0x0190
    228a:	88 23       	and	r24, r24
    228c:	c1 f4       	brne	.+48     	; 0x22be <main+0x54>
		{
			SPI_receiveByte(&Velocity1);
    228e:	80 e9       	ldi	r24, 0x90	; 144
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	0e 94 6e 07 	call	0xedc	; 0xedc <SPI_receiveByte>
			if (Velocity1 == 'A')
    2296:	80 91 90 01 	lds	r24, 0x0190
    229a:	81 34       	cpi	r24, 0x41	; 65
    229c:	21 f4       	brne	.+8      	; 0x22a6 <main+0x3c>
			{
				DIO_Pin_Write(PC4,HIGH);
    229e:	84 e0       	ldi	r24, 0x04	; 4
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <DIO_Pin_Write>
			}
			Velocity2 = Velocity1 ;
    22a6:	80 91 90 01 	lds	r24, 0x0190
    22aa:	80 93 91 01 	sts	0x0191, r24
			Timer_Start(0,Delta_t) ;
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	4a ef       	ldi	r20, 0xFA	; 250
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Timer_Start>
    22bc:	e4 cf       	rjmp	.-56     	; 0x2286 <main+0x1c>
		}
		else
		{
			SPI_receiveByte(&Velocity1);
    22be:	80 e9       	ldi	r24, 0x90	; 144
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	0e 94 6e 07 	call	0xedc	; 0xedc <SPI_receiveByte>
			Distance = Distance + (Velocity2*Delta_t*Ignite_Flag_Var)/1000 ;
    22c6:	80 91 91 01 	lds	r24, 0x0191
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	8a ef       	ldi	r24, 0xFA	; 250
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	ac 01       	movw	r20, r24
    22d4:	24 9f       	mul	r18, r20
    22d6:	c0 01       	movw	r24, r0
    22d8:	25 9f       	mul	r18, r21
    22da:	90 0d       	add	r25, r0
    22dc:	34 9f       	mul	r19, r20
    22de:	90 0d       	add	r25, r0
    22e0:	11 24       	eor	r1, r1
    22e2:	aa 27       	eor	r26, r26
    22e4:	97 fd       	sbrc	r25, 7
    22e6:	a0 95       	com	r26
    22e8:	ba 2f       	mov	r27, r26
    22ea:	20 91 97 01 	lds	r18, 0x0197
    22ee:	30 91 98 01 	lds	r19, 0x0198
    22f2:	40 91 99 01 	lds	r20, 0x0199
    22f6:	50 91 9a 01 	lds	r21, 0x019A
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsi3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	28 ee       	ldi	r18, 0xE8	; 232
    2308:	33 e0       	ldi	r19, 0x03	; 3
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 41 12 	call	0x2482	; 0x2482 <__udivmodsi4>
    2316:	da 01       	movw	r26, r20
    2318:	c9 01       	movw	r24, r18
    231a:	9c 01       	movw	r18, r24
    231c:	ad 01       	movw	r20, r26
    231e:	80 91 a7 01 	lds	r24, 0x01A7
    2322:	90 91 a8 01 	lds	r25, 0x01A8
    2326:	a0 91 a9 01 	lds	r26, 0x01A9
    232a:	b0 91 aa 01 	lds	r27, 0x01AA
    232e:	82 0f       	add	r24, r18
    2330:	93 1f       	adc	r25, r19
    2332:	a4 1f       	adc	r26, r20
    2334:	b5 1f       	adc	r27, r21
    2336:	80 93 a7 01 	sts	0x01A7, r24
    233a:	90 93 a8 01 	sts	0x01A8, r25
    233e:	a0 93 a9 01 	sts	0x01A9, r26
    2342:	b0 93 aa 01 	sts	0x01AA, r27
			Ignite_Flag_Var = 0 ;
    2346:	10 92 97 01 	sts	0x0197, r1
    234a:	10 92 98 01 	sts	0x0198, r1
    234e:	10 92 99 01 	sts	0x0199, r1
    2352:	10 92 9a 01 	sts	0x019A, r1
			Velocity2 = Velocity1 ;
    2356:	80 91 90 01 	lds	r24, 0x0190
    235a:	80 93 91 01 	sts	0x0191, r24
    235e:	93 cf       	rjmp	.-218    	; 0x2286 <main+0x1c>

00002360 <system_init>:
 *  Created on: Dec 27, 2019
 *      Author: hosam
 */
#include "uc2.h"
uint8_t system_init(void)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	6c 97       	sbiw	r28, 0x1c	; 28
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
	uint8_t status;
	strUART_Config obj2;
	obj2.u16_BaudRate = USART_BAUDRATE;
    2374:	80 e8       	ldi	r24, 0x80	; 128
    2376:	95 e2       	ldi	r25, 0x25	; 37
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
	obj2.u8_Interrupt = POLLING_MODE;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	8b 87       	std	Y+11, r24	; 0x0b
	obj2.u8_DataBits = EIGHT_BITS;
    2380:	88 e0       	ldi	r24, 0x08	; 8
    2382:	88 87       	std	Y+8, r24	; 0x08
	obj2.u8_Duplex =  FULL_DUPLEX;
    2384:	1c 86       	std	Y+12, r1	; 0x0c
	obj2.u8_Parity = PARITY_DISABLED;
    2386:	19 86       	std	Y+9, r1	; 0x09
	obj2.u8_SpeedMode = NORMAL_SPEED;
    2388:	1c 82       	std	Y+4, r1	; 0x04
	obj2.u8_StopBits = ONE_STOP;
    238a:	1a 86       	std	Y+10, r1	; 0x0a
	obj2.u8_Sync = ASYNCHRONOUS;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	8f 83       	std	Y+7, r24	; 0x07
	UART_init(&obj2);
    2390:	ce 01       	movw	r24, r28
    2392:	04 96       	adiw	r24, 0x04	; 4
    2394:	0e 94 3f 08 	call	0x107e	; 0x107e <UART_init>


	SPI_Cfg_s obj;
	obj.Data_Order= DATA_ORDER_MSB;
    2398:	1c 8a       	std	Y+20, r1	; 0x14
	obj.Interrupt_Mode= SPI_POLLING;
    239a:	18 8a       	std	Y+16, r1	; 0x10
	obj.Phase_Mode= SAMPLING_EDGE_LEAD;
    239c:	1a 8a       	std	Y+18, r1	; 0x12
	obj.Polarity_Mode= CLOCK_POLARITY_LOW;
    239e:	19 8a       	std	Y+17, r1	; 0x11
	obj.Pre_Scaller= FOSC_4;
    23a0:	1d 86       	std	Y+13, r1	; 0x0d
	obj.SPI_Enable= SPI_ENABLE;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	8b 8b       	std	Y+19, r24	; 0x13
	obj.SPI_Mode = SLAVEMODE;
    23a6:	1f 86       	std	Y+15, r1	; 0x0f
	obj.Speed_Mode= NORMAL_SPEED_MODE;
    23a8:	1e 86       	std	Y+14, r1	; 0x0e
	SPI_init(&obj);
    23aa:	ce 01       	movw	r24, r28
    23ac:	0d 96       	adiw	r24, 0x0d	; 13
    23ae:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SPI_init>

	Timer_Configuration_S_H Timer_Confg ;
	Timer_Configuration_S_H *Timer_Confg_ptr = &Timer_Confg ;
    23b2:	ce 01       	movw	r24, r28
    23b4:	45 96       	adiw	r24, 0x15	; 21
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
	Timer_Confg_ptr->Mode = 0 ;
    23ba:	e9 81       	ldd	r30, Y+1	; 0x01
    23bc:	fa 81       	ldd	r31, Y+2	; 0x02
    23be:	13 82       	std	Z+3, r1	; 0x03
	Timer_Confg_ptr->Res = 50 ;
    23c0:	e9 81       	ldd	r30, Y+1	; 0x01
    23c2:	fa 81       	ldd	r31, Y+2	; 0x02
    23c4:	82 e3       	ldi	r24, 0x32	; 50
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a0 e0       	ldi	r26, 0x00	; 0
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	84 83       	std	Z+4, r24	; 0x04
    23ce:	95 83       	std	Z+5, r25	; 0x05
    23d0:	a6 83       	std	Z+6, r26	; 0x06
    23d2:	b7 83       	std	Z+7, r27	; 0x07
	Timer_Confg_ptr->Timer_Channel = 0 ;
    23d4:	e9 81       	ldd	r30, Y+1	; 0x01
    23d6:	fa 81       	ldd	r31, Y+2	; 0x02
    23d8:	10 82       	st	Z, r1
	Timer_Confg_ptr->Timer_Mode = 0 ;
    23da:	e9 81       	ldd	r30, Y+1	; 0x01
    23dc:	fa 81       	ldd	r31, Y+2	; 0x02
    23de:	12 82       	std	Z+2, r1	; 0x02
	Timer_Confg_ptr->Timer_Psc = 5 ;
    23e0:	e9 81       	ldd	r30, Y+1	; 0x01
    23e2:	fa 81       	ldd	r31, Y+2	; 0x02
    23e4:	85 e0       	ldi	r24, 0x05	; 5
    23e6:	81 83       	std	Z+1, r24	; 0x01
	Timer_Init(Timer_Confg_ptr) ;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	0e 94 27 0b 	call	0x164e	; 0x164e <Timer_Init>

	DIO_Init_Pin(PD2,LOW);
    23f0:	8a e1       	ldi	r24, 0x1A	; 26
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <DIO_Init_Pin>
	SET_BIT(GICR,INT0);
    23f8:	ab e5       	ldi	r26, 0x5B	; 91
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	eb e5       	ldi	r30, 0x5B	; 91
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	80 64       	ori	r24, 0x40	; 64
    2404:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC00);
    2406:	a5 e5       	ldi	r26, 0x55	; 85
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e5 e5       	ldi	r30, 0x55	; 85
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	81 60       	ori	r24, 0x01	; 1
    2412:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    2414:	a5 e5       	ldi	r26, 0x55	; 85
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e5 e5       	ldi	r30, 0x55	; 85
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	82 60       	ori	r24, 0x02	; 2
    2420:	8c 93       	st	X, r24
	SET_BIT(SREG,I);
    2422:	af e5       	ldi	r26, 0x5F	; 95
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ef e5       	ldi	r30, 0x5F	; 95
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	80 68       	ori	r24, 0x80	; 128
    242e:	8c 93       	st	X, r24

	return status;
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2432:	6c 96       	adiw	r28, 0x1c	; 28
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <__mulsi3>:
    2444:	62 9f       	mul	r22, r18
    2446:	d0 01       	movw	r26, r0
    2448:	73 9f       	mul	r23, r19
    244a:	f0 01       	movw	r30, r0
    244c:	82 9f       	mul	r24, r18
    244e:	e0 0d       	add	r30, r0
    2450:	f1 1d       	adc	r31, r1
    2452:	64 9f       	mul	r22, r20
    2454:	e0 0d       	add	r30, r0
    2456:	f1 1d       	adc	r31, r1
    2458:	92 9f       	mul	r25, r18
    245a:	f0 0d       	add	r31, r0
    245c:	83 9f       	mul	r24, r19
    245e:	f0 0d       	add	r31, r0
    2460:	74 9f       	mul	r23, r20
    2462:	f0 0d       	add	r31, r0
    2464:	65 9f       	mul	r22, r21
    2466:	f0 0d       	add	r31, r0
    2468:	99 27       	eor	r25, r25
    246a:	72 9f       	mul	r23, r18
    246c:	b0 0d       	add	r27, r0
    246e:	e1 1d       	adc	r30, r1
    2470:	f9 1f       	adc	r31, r25
    2472:	63 9f       	mul	r22, r19
    2474:	b0 0d       	add	r27, r0
    2476:	e1 1d       	adc	r30, r1
    2478:	f9 1f       	adc	r31, r25
    247a:	bd 01       	movw	r22, r26
    247c:	cf 01       	movw	r24, r30
    247e:	11 24       	eor	r1, r1
    2480:	08 95       	ret

00002482 <__udivmodsi4>:
    2482:	a1 e2       	ldi	r26, 0x21	; 33
    2484:	1a 2e       	mov	r1, r26
    2486:	aa 1b       	sub	r26, r26
    2488:	bb 1b       	sub	r27, r27
    248a:	fd 01       	movw	r30, r26
    248c:	0d c0       	rjmp	.+26     	; 0x24a8 <__udivmodsi4_ep>

0000248e <__udivmodsi4_loop>:
    248e:	aa 1f       	adc	r26, r26
    2490:	bb 1f       	adc	r27, r27
    2492:	ee 1f       	adc	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	a2 17       	cp	r26, r18
    2498:	b3 07       	cpc	r27, r19
    249a:	e4 07       	cpc	r30, r20
    249c:	f5 07       	cpc	r31, r21
    249e:	20 f0       	brcs	.+8      	; 0x24a8 <__udivmodsi4_ep>
    24a0:	a2 1b       	sub	r26, r18
    24a2:	b3 0b       	sbc	r27, r19
    24a4:	e4 0b       	sbc	r30, r20
    24a6:	f5 0b       	sbc	r31, r21

000024a8 <__udivmodsi4_ep>:
    24a8:	66 1f       	adc	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	88 1f       	adc	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	1a 94       	dec	r1
    24b2:	69 f7       	brne	.-38     	; 0x248e <__udivmodsi4_loop>
    24b4:	60 95       	com	r22
    24b6:	70 95       	com	r23
    24b8:	80 95       	com	r24
    24ba:	90 95       	com	r25
    24bc:	9b 01       	movw	r18, r22
    24be:	ac 01       	movw	r20, r24
    24c0:	bd 01       	movw	r22, r26
    24c2:	cf 01       	movw	r24, r30
    24c4:	08 95       	ret

000024c6 <__prologue_saves__>:
    24c6:	2f 92       	push	r2
    24c8:	3f 92       	push	r3
    24ca:	4f 92       	push	r4
    24cc:	5f 92       	push	r5
    24ce:	6f 92       	push	r6
    24d0:	7f 92       	push	r7
    24d2:	8f 92       	push	r8
    24d4:	9f 92       	push	r9
    24d6:	af 92       	push	r10
    24d8:	bf 92       	push	r11
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	ca 1b       	sub	r28, r26
    24f0:	db 0b       	sbc	r29, r27
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	09 94       	ijmp

000024fe <__epilogue_restores__>:
    24fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2500:	39 88       	ldd	r3, Y+17	; 0x11
    2502:	48 88       	ldd	r4, Y+16	; 0x10
    2504:	5f 84       	ldd	r5, Y+15	; 0x0f
    2506:	6e 84       	ldd	r6, Y+14	; 0x0e
    2508:	7d 84       	ldd	r7, Y+13	; 0x0d
    250a:	8c 84       	ldd	r8, Y+12	; 0x0c
    250c:	9b 84       	ldd	r9, Y+11	; 0x0b
    250e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2510:	b9 84       	ldd	r11, Y+9	; 0x09
    2512:	c8 84       	ldd	r12, Y+8	; 0x08
    2514:	df 80       	ldd	r13, Y+7	; 0x07
    2516:	ee 80       	ldd	r14, Y+6	; 0x06
    2518:	fd 80       	ldd	r15, Y+5	; 0x05
    251a:	0c 81       	ldd	r16, Y+4	; 0x04
    251c:	1b 81       	ldd	r17, Y+3	; 0x03
    251e:	aa 81       	ldd	r26, Y+2	; 0x02
    2520:	b9 81       	ldd	r27, Y+1	; 0x01
    2522:	ce 0f       	add	r28, r30
    2524:	d1 1d       	adc	r29, r1
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	ed 01       	movw	r28, r26
    2532:	08 95       	ret

00002534 <_exit>:
    2534:	f8 94       	cli

00002536 <__stop_program>:
    2536:	ff cf       	rjmp	.-2      	; 0x2536 <__stop_program>
