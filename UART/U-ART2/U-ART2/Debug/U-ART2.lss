
U-ART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000584  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000005f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bef  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000727  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081c  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000519  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ce  00000000  00000000  00002925  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000031f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_13>
  38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 90 01 	call	0x320	; 0x320 <main>
  74:	0c 94 c0 02 	jmp	0x580	; 0x580 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WRITE_PIN>:



extern uint8_t DIO_WRITE_PIN (uint8_t u8Pin_Number,uint8_t u8Value )
{
	if(u8Pin_Number < MAX_PINS)
  7c:	80 32       	cpi	r24, 0x20	; 32
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_WRITE_PIN+0x6>
  80:	9e c0       	rjmp	.+316    	; 0x1be <DIO_WRITE_PIN+0x142>
		{
		if (u8Value == HIGH)
  82:	61 30       	cpi	r22, 0x01	; 1
  84:	09 f0       	breq	.+2      	; 0x88 <DIO_WRITE_PIN+0xc>
  86:	4b c0       	rjmp	.+150    	; 0x11e <DIO_WRITE_PIN+0xa2>
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
  88:	88 30       	cpi	r24, 0x08	; 8
  8a:	78 f4       	brcc	.+30     	; 0xaa <DIO_WRITE_PIN+0x2e>
  8c:	4b b3       	in	r20, 0x1b	; 27
  8e:	87 70       	andi	r24, 0x07	; 7
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	b9 01       	movw	r22, r18
  96:	02 c0       	rjmp	.+4      	; 0x9c <DIO_WRITE_PIN+0x20>
  98:	66 0f       	add	r22, r22
  9a:	77 1f       	adc	r23, r23
  9c:	8a 95       	dec	r24
  9e:	e2 f7       	brpl	.-8      	; 0x98 <DIO_WRITE_PIN+0x1c>
  a0:	cb 01       	movw	r24, r22
  a2:	84 2b       	or	r24, r20
  a4:	8b bb       	out	0x1b, r24	; 27
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	08 95       	ret
	if(u8Pin_Number < MAX_PINS)
		{
		if (u8Value == HIGH)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    PORTB |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
  aa:	98 ef       	ldi	r25, 0xF8	; 248
  ac:	98 0f       	add	r25, r24
  ae:	98 30       	cpi	r25, 0x08	; 8
  b0:	78 f4       	brcc	.+30     	; 0xd0 <DIO_WRITE_PIN+0x54>
  b2:	48 b3       	in	r20, 0x18	; 24
  b4:	87 70       	andi	r24, 0x07	; 7
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	b9 01       	movw	r22, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_WRITE_PIN+0x46>
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	8a 95       	dec	r24
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_WRITE_PIN+0x42>
  c6:	cb 01       	movw	r24, r22
  c8:	84 2b       	or	r24, r20
  ca:	88 bb       	out	0x18, r24	; 24
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	08 95       	ret
		{
		if (u8Value == HIGH)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    PORTB |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   PORTC |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
  d0:	90 ef       	ldi	r25, 0xF0	; 240
  d2:	98 0f       	add	r25, r24
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	78 f4       	brcc	.+30     	; 0xf6 <DIO_WRITE_PIN+0x7a>
  d8:	45 b3       	in	r20, 0x15	; 21
  da:	87 70       	andi	r24, 0x07	; 7
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	b9 01       	movw	r22, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_WRITE_PIN+0x6c>
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	8a 95       	dec	r24
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_WRITE_PIN+0x68>
  ec:	cb 01       	movw	r24, r22
  ee:	84 2b       	or	r24, r20
  f0:	85 bb       	out	0x15, r24	; 21
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret
		if (u8Value == HIGH)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    PORTB |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   PORTC |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   PORTD |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
  f6:	98 ee       	ldi	r25, 0xE8	; 232
  f8:	98 0f       	add	r25, r24
  fa:	98 30       	cpi	r25, 0x08	; 8
  fc:	08 f0       	brcs	.+2      	; 0x100 <DIO_WRITE_PIN+0x84>
  fe:	61 c0       	rjmp	.+194    	; 0x1c2 <DIO_WRITE_PIN+0x146>
 100:	42 b3       	in	r20, 0x12	; 18
 102:	87 70       	andi	r24, 0x07	; 7
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	b9 01       	movw	r22, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_WRITE_PIN+0x94>
 10c:	66 0f       	add	r22, r22
 10e:	77 1f       	adc	r23, r23
 110:	8a 95       	dec	r24
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_WRITE_PIN+0x90>
 114:	cb 01       	movw	r24, r22
 116:	84 2b       	or	r24, r20
 118:	82 bb       	out	0x12, r24	; 18
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    PORTB |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   PORTC |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   PORTD |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
		}
		else if (u8Value == LOW)
 11e:	61 11       	cpse	r22, r1
 120:	52 c0       	rjmp	.+164    	; 0x1c6 <DIO_WRITE_PIN+0x14a>
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	80 f4       	brcc	.+32     	; 0x146 <DIO_WRITE_PIN+0xca>
 126:	4b b3       	in	r20, 0x1b	; 27
 128:	87 70       	andi	r24, 0x07	; 7
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	b9 01       	movw	r22, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_WRITE_PIN+0xba>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_WRITE_PIN+0xb6>
 13a:	cb 01       	movw	r24, r22
 13c:	80 95       	com	r24
 13e:	84 23       	and	r24, r20
 140:	8b bb       	out	0x1b, r24	; 27
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   PORTD |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
		}
		else if (u8Value == LOW)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    PORTB &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 146:	98 ef       	ldi	r25, 0xF8	; 248
 148:	98 0f       	add	r25, r24
 14a:	98 30       	cpi	r25, 0x08	; 8
 14c:	80 f4       	brcc	.+32     	; 0x16e <DIO_WRITE_PIN+0xf2>
 14e:	48 b3       	in	r20, 0x18	; 24
 150:	87 70       	andi	r24, 0x07	; 7
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_WRITE_PIN+0xe2>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_WRITE_PIN+0xde>
 162:	cb 01       	movw	r24, r22
 164:	80 95       	com	r24
 166:	84 23       	and	r24, r20
 168:	88 bb       	out	0x18, r24	; 24
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret
		}
		else if (u8Value == LOW)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    PORTB &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   PORTC &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 16e:	90 ef       	ldi	r25, 0xF0	; 240
 170:	98 0f       	add	r25, r24
 172:	98 30       	cpi	r25, 0x08	; 8
 174:	80 f4       	brcc	.+32     	; 0x196 <DIO_WRITE_PIN+0x11a>
 176:	45 b3       	in	r20, 0x15	; 21
 178:	87 70       	andi	r24, 0x07	; 7
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_WRITE_PIN+0x10a>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_WRITE_PIN+0x106>
 18a:	cb 01       	movw	r24, r22
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	85 bb       	out	0x15, r24	; 21
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
		else if (u8Value == LOW)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     PORTA &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    PORTB &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   PORTC &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   PORTD &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 196:	98 ee       	ldi	r25, 0xE8	; 232
 198:	98 0f       	add	r25, r24
 19a:	98 30       	cpi	r25, 0x08	; 8
 19c:	b0 f4       	brcc	.+44     	; 0x1ca <DIO_WRITE_PIN+0x14e>
 19e:	42 b3       	in	r20, 0x12	; 18
 1a0:	87 70       	andi	r24, 0x07	; 7
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_WRITE_PIN+0x132>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	8a 95       	dec	r24
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_WRITE_PIN+0x12e>
 1b2:	cb 01       	movw	r24, r22
 1b4:	80 95       	com	r24
 1b6:	84 23       	and	r24, r20
 1b8:	82 bb       	out	0x12, r24	; 18
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret

		}else
		{
			return ERROR_NOK;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   PORTC &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   PORTD &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
		}
		else
		{
			return ERROR_NOK;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
		}
		return ERROR_OK;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
		}else
		{
			return ERROR_NOK;
		}

}
 1cc:	08 95       	ret

000001ce <DIO_INIT_Pin>:
extern uint8_t DIO_INIT_Pin (uint8_t u8Pin_Number,uint8_t u8State)
{
	if(u8Pin_Number < MAX_PINS)
 1ce:	80 32       	cpi	r24, 0x20	; 32
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <DIO_INIT_Pin+0x6>
 1d2:	9e c0       	rjmp	.+316    	; 0x310 <DIO_INIT_Pin+0x142>
	{
		if (u8State == OUTPUT)
 1d4:	61 30       	cpi	r22, 0x01	; 1
 1d6:	09 f0       	breq	.+2      	; 0x1da <DIO_INIT_Pin+0xc>
 1d8:	4b c0       	rjmp	.+150    	; 0x270 <DIO_INIT_Pin+0xa2>
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 1da:	88 30       	cpi	r24, 0x08	; 8
 1dc:	78 f4       	brcc	.+30     	; 0x1fc <DIO_INIT_Pin+0x2e>
 1de:	4a b3       	in	r20, 0x1a	; 26
 1e0:	87 70       	andi	r24, 0x07	; 7
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	b9 01       	movw	r22, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_INIT_Pin+0x20>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_INIT_Pin+0x1c>
 1f2:	cb 01       	movw	r24, r22
 1f4:	84 2b       	or	r24, r20
 1f6:	8a bb       	out	0x1a, r24	; 26
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 95       	ret
	if(u8Pin_Number < MAX_PINS)
	{
		if (u8State == OUTPUT)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    DDRB |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 1fc:	98 ef       	ldi	r25, 0xF8	; 248
 1fe:	98 0f       	add	r25, r24
 200:	98 30       	cpi	r25, 0x08	; 8
 202:	78 f4       	brcc	.+30     	; 0x222 <DIO_INIT_Pin+0x54>
 204:	47 b3       	in	r20, 0x17	; 23
 206:	87 70       	andi	r24, 0x07	; 7
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	b9 01       	movw	r22, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_INIT_Pin+0x46>
 210:	66 0f       	add	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	8a 95       	dec	r24
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_INIT_Pin+0x42>
 218:	cb 01       	movw	r24, r22
 21a:	84 2b       	or	r24, r20
 21c:	87 bb       	out	0x17, r24	; 23
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret
	{
		if (u8State == OUTPUT)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    DDRB |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   DDRC |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 222:	90 ef       	ldi	r25, 0xF0	; 240
 224:	98 0f       	add	r25, r24
 226:	98 30       	cpi	r25, 0x08	; 8
 228:	78 f4       	brcc	.+30     	; 0x248 <DIO_INIT_Pin+0x7a>
 22a:	44 b3       	in	r20, 0x14	; 20
 22c:	87 70       	andi	r24, 0x07	; 7
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_INIT_Pin+0x6c>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_INIT_Pin+0x68>
 23e:	cb 01       	movw	r24, r22
 240:	84 2b       	or	r24, r20
 242:	84 bb       	out	0x14, r24	; 20
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret
		if (u8State == OUTPUT)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    DDRB |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   DDRC |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   DDRD |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 248:	98 ee       	ldi	r25, 0xE8	; 232
 24a:	98 0f       	add	r25, r24
 24c:	98 30       	cpi	r25, 0x08	; 8
 24e:	08 f0       	brcs	.+2      	; 0x252 <DIO_INIT_Pin+0x84>
 250:	61 c0       	rjmp	.+194    	; 0x314 <DIO_INIT_Pin+0x146>
 252:	41 b3       	in	r20, 0x11	; 17
 254:	87 70       	andi	r24, 0x07	; 7
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_INIT_Pin+0x94>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_INIT_Pin+0x90>
 266:	cb 01       	movw	r24, r22
 268:	84 2b       	or	r24, r20
 26a:	81 bb       	out	0x11, r24	; 17
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    DDRB |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   DDRC |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   DDRD |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
		}
		else if(u8State == INPUT)
 270:	61 11       	cpse	r22, r1
 272:	52 c0       	rjmp	.+164    	; 0x318 <DIO_INIT_Pin+0x14a>
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 274:	88 30       	cpi	r24, 0x08	; 8
 276:	80 f4       	brcc	.+32     	; 0x298 <DIO_INIT_Pin+0xca>
 278:	4a b3       	in	r20, 0x1a	; 26
 27a:	87 70       	andi	r24, 0x07	; 7
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	b9 01       	movw	r22, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_INIT_Pin+0xba>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	8a 95       	dec	r24
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_INIT_Pin+0xb6>
 28c:	cb 01       	movw	r24, r22
 28e:	80 95       	com	r24
 290:	84 23       	and	r24, r20
 292:	8a bb       	out	0x1a, r24	; 26
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   DDRD |=   (1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
		}
		else if(u8State == INPUT)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    DDRB &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 298:	98 ef       	ldi	r25, 0xF8	; 248
 29a:	98 0f       	add	r25, r24
 29c:	98 30       	cpi	r25, 0x08	; 8
 29e:	80 f4       	brcc	.+32     	; 0x2c0 <DIO_INIT_Pin+0xf2>
 2a0:	47 b3       	in	r20, 0x17	; 23
 2a2:	87 70       	andi	r24, 0x07	; 7
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_INIT_Pin+0xe2>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_INIT_Pin+0xde>
 2b4:	cb 01       	movw	r24, r22
 2b6:	80 95       	com	r24
 2b8:	84 23       	and	r24, r20
 2ba:	87 bb       	out	0x17, r24	; 23
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
		}
		else if(u8State == INPUT)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    DDRB &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   DDRC &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 2c0:	90 ef       	ldi	r25, 0xF0	; 240
 2c2:	98 0f       	add	r25, r24
 2c4:	98 30       	cpi	r25, 0x08	; 8
 2c6:	80 f4       	brcc	.+32     	; 0x2e8 <DIO_INIT_Pin+0x11a>
 2c8:	44 b3       	in	r20, 0x14	; 20
 2ca:	87 70       	andi	r24, 0x07	; 7
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	b9 01       	movw	r22, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_INIT_Pin+0x10a>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_INIT_Pin+0x106>
 2dc:	cb 01       	movw	r24, r22
 2de:	80 95       	com	r24
 2e0:	84 23       	and	r24, r20
 2e2:	84 bb       	out	0x14, r24	; 20
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
		else if(u8State == INPUT)
		{
			if     (u8Pin_Number >= 0 && u8Pin_Number < 8)     DDRA &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 8 && u8Pin_Number < 16)    DDRB &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   DDRC &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   DDRD &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
 2e8:	98 ee       	ldi	r25, 0xE8	; 232
 2ea:	98 0f       	add	r25, r24
 2ec:	98 30       	cpi	r25, 0x08	; 8
 2ee:	b0 f4       	brcc	.+44     	; 0x31c <DIO_INIT_Pin+0x14e>
 2f0:	41 b3       	in	r20, 0x11	; 17
 2f2:	87 70       	andi	r24, 0x07	; 7
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	b9 01       	movw	r22, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_INIT_Pin+0x132>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	8a 95       	dec	r24
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_INIT_Pin+0x12e>
 304:	cb 01       	movw	r24, r22
 306:	80 95       	com	r24
 308:	84 23       	and	r24, r20
 30a:	81 bb       	out	0x11, r24	; 17
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
	}
	else
	{
		return ERROR_NOK;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	08 95       	ret
		}
		else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
			else if(u8Pin_Number >= 16 && u8Pin_Number < 24)   DDRC &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
			else if(u8Pin_Number >= 24 && u8Pin_Number < 32)   DDRD &=  ~(1 << (u8Pin_Number%BITS_PER_REGISTER)) ;
		}
		else
		{
			return ERROR_NOK;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	08 95       	ret
		}
		return ERROR_OK;
 31c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return ERROR_NOK;
	}
}
 31e:	08 95       	ret

00000320 <main>:
 * Author : Mario
 */ 

#include "uart.h"
int main(void)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	2a 97       	sbiw	r28, 0x0a	; 10
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
	strUART_Config cfg;
	cfg.u16_BaudRate = 9600;
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	95 e2       	ldi	r25, 0x25	; 37
 338:	9b 83       	std	Y+3, r25	; 0x03
 33a:	8a 83       	std	Y+2, r24	; 0x02
	cfg.u8_DataBits = EIGHT_BITS;
 33c:	88 e0       	ldi	r24, 0x08	; 8
 33e:	8d 83       	std	Y+5, r24	; 0x05
	cfg.u8_Duplex = FULL_DUPLEX;
 340:	19 86       	std	Y+9, r1	; 0x09
	cfg.u8_Interrupt = INTERRUPT_MODE;
 342:	18 86       	std	Y+8, r1	; 0x08
	cfg.u8_Parity = PARITY_DISABLED;
 344:	1e 82       	std	Y+6, r1	; 0x06
	cfg.u8_SpeedMode = NORMAL_SPEED;
 346:	19 82       	std	Y+1, r1	; 0x01
	cfg.u8_StopBits = ONE_STOP;
 348:	1f 82       	std	Y+7, r1	; 0x07
	cfg.u8_Sync = ASYNCHRONOUS;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t data;
	uint8_t data_transmit = 0x66 ;
	PORTA = 0xFF ;
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	8b bb       	out	0x1b, r24	; 27
	UART_init(&cfg);
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	0e 94 19 02 	call	0x432	; 0x432 <UART_init>
    while (1) 
    {
		 UART_sendByte(data_transmit) ;
 35a:	86 e6       	ldi	r24, 0x66	; 102
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 b2 02 	call	0x564	; 0x564 <UART_sendByte>
		 UART_recieveByte(&data); //Receive Byte from Terminal1	 
 362:	ce 01       	movw	r24, r28
 364:	0a 96       	adiw	r24, 0x0a	; 10
 366:	0e 94 b9 02 	call	0x572	; 0x572 <UART_recieveByte>
 36a:	f7 cf       	rjmp	.-18     	; 0x35a <main+0x3a>

0000036c <__vector_14>:
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
 38e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gu8_DataTransmit>
 392:	8c b9       	out	0x0c, r24	; 12
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	84 e0       	ldi	r24, 0x04	; 4
 398:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_INIT_Pin>
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WRITE_PIN>
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_INIT_Pin>
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WRITE_PIN>
 3b4:	55 98       	cbi	0x0a, 5	; 10
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_13>:
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8a e0       	ldi	r24, 0x0A	; 10
 3fe:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_INIT_Pin>
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	8a e0       	ldi	r24, 0x0A	; 10
 406:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WRITE_PIN>
 40a:	8c b1       	in	r24, 0x0c	; 12
 40c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <UART_init>:
 432:	fc 01       	movw	r30, r24
 434:	54 9a       	sbi	0x0a, 4	; 10
 436:	53 9a       	sbi	0x0a, 3	; 10
 438:	80 b5       	in	r24, 0x20	; 32
 43a:	8f 77       	andi	r24, 0x7F	; 127
 43c:	80 bd       	out	0x20, r24	; 32
 43e:	80 81       	ld	r24, Z
 440:	88 23       	and	r24, r24
 442:	19 f0       	breq	.+6      	; 0x44a <UART_init+0x18>
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	39 f0       	breq	.+14     	; 0x456 <UART_init+0x24>
 448:	0c c0       	rjmp	.+24     	; 0x462 <UART_init+0x30>
 44a:	59 98       	cbi	0x0b, 1	; 11
 44c:	10 bc       	out	0x20, r1	; 32
 44e:	83 e3       	ldi	r24, 0x33	; 51
 450:	89 b9       	out	0x09, r24	; 9
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	07 c0       	rjmp	.+14     	; 0x464 <UART_init+0x32>
 456:	59 9a       	sbi	0x0b, 1	; 11
 458:	10 bc       	out	0x20, r1	; 32
 45a:	87 e6       	ldi	r24, 0x67	; 103
 45c:	89 b9       	out	0x09, r24	; 9
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	01 c0       	rjmp	.+2      	; 0x464 <UART_init+0x32>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 b5       	in	r25, 0x20	; 32
 466:	90 68       	ori	r25, 0x80	; 128
 468:	90 bd       	out	0x20, r25	; 32
 46a:	93 81       	ldd	r25, Z+3	; 0x03
 46c:	99 23       	and	r25, r25
 46e:	19 f0       	breq	.+6      	; 0x476 <UART_init+0x44>
 470:	91 30       	cpi	r25, 0x01	; 1
 472:	29 f0       	breq	.+10     	; 0x47e <UART_init+0x4c>
 474:	08 c0       	rjmp	.+16     	; 0x486 <UART_init+0x54>
 476:	90 b5       	in	r25, 0x20	; 32
 478:	90 64       	ori	r25, 0x40	; 64
 47a:	90 bd       	out	0x20, r25	; 32
 47c:	05 c0       	rjmp	.+10     	; 0x488 <UART_init+0x56>
 47e:	90 b5       	in	r25, 0x20	; 32
 480:	9f 7b       	andi	r25, 0xBF	; 191
 482:	90 bd       	out	0x20, r25	; 32
 484:	01 c0       	rjmp	.+2      	; 0x488 <UART_init+0x56>
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	94 81       	ldd	r25, Z+4	; 0x04
 48a:	97 30       	cpi	r25, 0x07	; 7
 48c:	d9 f0       	breq	.+54     	; 0x4c4 <UART_init+0x92>
 48e:	28 f4       	brcc	.+10     	; 0x49a <UART_init+0x68>
 490:	95 30       	cpi	r25, 0x05	; 5
 492:	41 f0       	breq	.+16     	; 0x4a4 <UART_init+0x72>
 494:	96 30       	cpi	r25, 0x06	; 6
 496:	71 f0       	breq	.+28     	; 0x4b4 <UART_init+0x82>
 498:	2d c0       	rjmp	.+90     	; 0x4f4 <UART_init+0xc2>
 49a:	98 30       	cpi	r25, 0x08	; 8
 49c:	d9 f0       	breq	.+54     	; 0x4d4 <UART_init+0xa2>
 49e:	99 30       	cpi	r25, 0x09	; 9
 4a0:	09 f1       	breq	.+66     	; 0x4e4 <UART_init+0xb2>
 4a2:	28 c0       	rjmp	.+80     	; 0x4f4 <UART_init+0xc2>
 4a4:	90 b5       	in	r25, 0x20	; 32
 4a6:	9d 7f       	andi	r25, 0xFD	; 253
 4a8:	90 bd       	out	0x20, r25	; 32
 4aa:	90 b5       	in	r25, 0x20	; 32
 4ac:	9b 7f       	andi	r25, 0xFB	; 251
 4ae:	90 bd       	out	0x20, r25	; 32
 4b0:	52 98       	cbi	0x0a, 2	; 10
 4b2:	21 c0       	rjmp	.+66     	; 0x4f6 <UART_init+0xc4>
 4b4:	90 b5       	in	r25, 0x20	; 32
 4b6:	92 60       	ori	r25, 0x02	; 2
 4b8:	90 bd       	out	0x20, r25	; 32
 4ba:	90 b5       	in	r25, 0x20	; 32
 4bc:	9b 7f       	andi	r25, 0xFB	; 251
 4be:	90 bd       	out	0x20, r25	; 32
 4c0:	52 98       	cbi	0x0a, 2	; 10
 4c2:	19 c0       	rjmp	.+50     	; 0x4f6 <UART_init+0xc4>
 4c4:	90 b5       	in	r25, 0x20	; 32
 4c6:	9d 7f       	andi	r25, 0xFD	; 253
 4c8:	90 bd       	out	0x20, r25	; 32
 4ca:	90 b5       	in	r25, 0x20	; 32
 4cc:	94 60       	ori	r25, 0x04	; 4
 4ce:	90 bd       	out	0x20, r25	; 32
 4d0:	52 98       	cbi	0x0a, 2	; 10
 4d2:	11 c0       	rjmp	.+34     	; 0x4f6 <UART_init+0xc4>
 4d4:	90 b5       	in	r25, 0x20	; 32
 4d6:	92 60       	ori	r25, 0x02	; 2
 4d8:	90 bd       	out	0x20, r25	; 32
 4da:	90 b5       	in	r25, 0x20	; 32
 4dc:	94 60       	ori	r25, 0x04	; 4
 4de:	90 bd       	out	0x20, r25	; 32
 4e0:	52 98       	cbi	0x0a, 2	; 10
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <UART_init+0xc4>
 4e4:	90 b5       	in	r25, 0x20	; 32
 4e6:	92 60       	ori	r25, 0x02	; 2
 4e8:	90 bd       	out	0x20, r25	; 32
 4ea:	90 b5       	in	r25, 0x20	; 32
 4ec:	94 60       	ori	r25, 0x04	; 4
 4ee:	90 bd       	out	0x20, r25	; 32
 4f0:	52 9a       	sbi	0x0a, 2	; 10
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <UART_init+0xc4>
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	95 81       	ldd	r25, Z+5	; 0x05
 4f8:	91 30       	cpi	r25, 0x01	; 1
 4fa:	59 f0       	breq	.+22     	; 0x512 <UART_init+0xe0>
 4fc:	18 f0       	brcs	.+6      	; 0x504 <UART_init+0xd2>
 4fe:	92 30       	cpi	r25, 0x02	; 2
 500:	79 f0       	breq	.+30     	; 0x520 <UART_init+0xee>
 502:	15 c0       	rjmp	.+42     	; 0x52e <UART_init+0xfc>
 504:	90 b5       	in	r25, 0x20	; 32
 506:	9f 7d       	andi	r25, 0xDF	; 223
 508:	90 bd       	out	0x20, r25	; 32
 50a:	90 b5       	in	r25, 0x20	; 32
 50c:	9f 7e       	andi	r25, 0xEF	; 239
 50e:	90 bd       	out	0x20, r25	; 32
 510:	0f c0       	rjmp	.+30     	; 0x530 <UART_init+0xfe>
 512:	90 b5       	in	r25, 0x20	; 32
 514:	90 62       	ori	r25, 0x20	; 32
 516:	90 bd       	out	0x20, r25	; 32
 518:	90 b5       	in	r25, 0x20	; 32
 51a:	9f 7e       	andi	r25, 0xEF	; 239
 51c:	90 bd       	out	0x20, r25	; 32
 51e:	08 c0       	rjmp	.+16     	; 0x530 <UART_init+0xfe>
 520:	90 b5       	in	r25, 0x20	; 32
 522:	90 62       	ori	r25, 0x20	; 32
 524:	90 bd       	out	0x20, r25	; 32
 526:	90 b5       	in	r25, 0x20	; 32
 528:	90 61       	ori	r25, 0x10	; 16
 52a:	90 bd       	out	0x20, r25	; 32
 52c:	01 c0       	rjmp	.+2      	; 0x530 <UART_init+0xfe>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	96 81       	ldd	r25, Z+6	; 0x06
 532:	99 23       	and	r25, r25
 534:	19 f0       	breq	.+6      	; 0x53c <UART_init+0x10a>
 536:	91 30       	cpi	r25, 0x01	; 1
 538:	29 f0       	breq	.+10     	; 0x544 <UART_init+0x112>
 53a:	08 c0       	rjmp	.+16     	; 0x54c <UART_init+0x11a>
 53c:	90 b5       	in	r25, 0x20	; 32
 53e:	98 60       	ori	r25, 0x08	; 8
 540:	90 bd       	out	0x20, r25	; 32
 542:	05 c0       	rjmp	.+10     	; 0x54e <UART_init+0x11c>
 544:	90 b5       	in	r25, 0x20	; 32
 546:	97 7f       	andi	r25, 0xF7	; 247
 548:	90 bd       	out	0x20, r25	; 32
 54a:	01 c0       	rjmp	.+2      	; 0x54e <UART_init+0x11c>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	97 81       	ldd	r25, Z+7	; 0x07
 550:	99 23       	and	r25, r25
 552:	21 f0       	breq	.+8      	; 0x55c <UART_init+0x12a>
 554:	91 30       	cpi	r25, 0x01	; 1
 556:	29 f0       	breq	.+10     	; 0x562 <UART_init+0x130>
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	08 95       	ret
 55c:	9f b7       	in	r25, 0x3f	; 63
 55e:	90 68       	ori	r25, 0x80	; 128
 560:	9f bf       	out	0x3f, r25	; 63
 562:	08 95       	ret

00000564 <UART_sendByte>:
 564:	5d 9b       	sbis	0x0b, 5	; 11
 566:	fe cf       	rjmp	.-4      	; 0x564 <UART_sendByte>
 568:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gu8_DataTransmit>
 56c:	55 9a       	sbi	0x0a, 5	; 10
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	08 95       	ret

00000572 <UART_recieveByte>:
 572:	57 9a       	sbi	0x0a, 7	; 10
 574:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret

00000580 <_exit>:
 580:	f8 94       	cli

00000582 <__stop_program>:
 582:	ff cf       	rjmp	.-2      	; 0x582 <__stop_program>
